// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeAuthLoginResponse(response *AuthLoginNoContent, w http.ResponseWriter) error {
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Set-Cookie" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Set-Cookie",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(response.SetCookie))
			}); err != nil {
				return errors.Wrap(err, "encode Set-Cookie header")
			}
		}
	}
	w.WriteHeader(204)

	return nil
}

func encodeAuthLogoutResponse(response *AuthLogoutNoContent, w http.ResponseWriter) error {
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Set-Cookie" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Set-Cookie",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(response.SetCookie))
			}); err != nil {
				return errors.Wrap(err, "encode Set-Cookie header")
			}
		}
	}
	w.WriteHeader(204)

	return nil
}

func encodeAuthSessionResponse(response AuthSessionRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SessionHeaders:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Set-Cookie" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.SetCookie))
				}); err != nil {
					return errors.Wrap(err, "encode Set-Cookie header")
				}
			}
		}
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *AuthSessionNoContent:
		w.WriteHeader(204)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeAuthWsResponse(response *AuthWsSwitchingProtocols, w http.ResponseWriter) error {
	w.WriteHeader(101)

	return nil
}

func encodeEventsGetEventsResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesCategoryStatsResponse(response []CategoryStats, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesCopyResponse(response *File, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesCreateResponse(response *File, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(201)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesCreateShareResponse(response *FilesCreateShareCreated, w http.ResponseWriter) error {
	w.WriteHeader(201)

	return nil
}

func encodeFilesDeleteResponse(response *FilesDeleteNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeFilesDeleteShareResponse(response *FilesDeleteShareNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeFilesEditShareResponse(response *FilesEditShareNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeFilesGetByIdResponse(response *File, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesListResponse(response *FileList, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesMkdirResponse(response *FilesMkdirNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeFilesMoveResponse(response *FilesMoveNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeFilesShareByidResponse(response *FileShare, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesStreamResponse(response FilesStreamRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *FilesStreamOKHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Accept-Ranges" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Accept-Ranges",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(string(response.AcceptRanges)))
				}); err != nil {
					return errors.Wrap(err, "encode Accept-Ranges header")
				}
			}
			// Encode "Content-Disposition" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Disposition",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentDisposition))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Disposition header")
				}
			}
			// Encode "Content-Length" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentLength))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Length header")
				}
			}
			// Encode "Content-Range" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Range",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					if val, ok := response.ContentRange.Get(); ok {
						return e.EncodeValue(conv.StringToString(val))
					}
					return nil
				}); err != nil {
					return errors.Wrap(err, "encode Content-Range header")
				}
			}
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
			// Encode "Etag" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Etag",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.Etag))
				}); err != nil {
					return errors.Wrap(err, "encode Etag header")
				}
			}
			// Encode "Last-Modified" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Last-Modified",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.LastModified))
				}); err != nil {
					return errors.Wrap(err, "encode Last-Modified header")
				}
			}
		}
		w.WriteHeader(200)

		writer := w
		if closer, ok := response.Response.Data.(io.Closer); ok {
			defer closer.Close()
		}
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *FilesStreamPartialContentHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Accept-Ranges" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Accept-Ranges",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(string(response.AcceptRanges)))
				}); err != nil {
					return errors.Wrap(err, "encode Accept-Ranges header")
				}
			}
			// Encode "Content-Disposition" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Disposition",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentDisposition))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Disposition header")
				}
			}
			// Encode "Content-Length" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentLength))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Length header")
				}
			}
			// Encode "Content-Range" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Range",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					if val, ok := response.ContentRange.Get(); ok {
						return e.EncodeValue(conv.StringToString(val))
					}
					return nil
				}); err != nil {
					return errors.Wrap(err, "encode Content-Range header")
				}
			}
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
			// Encode "Etag" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Etag",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.Etag))
				}); err != nil {
					return errors.Wrap(err, "encode Etag header")
				}
			}
			// Encode "Last-Modified" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Last-Modified",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.LastModified))
				}); err != nil {
					return errors.Wrap(err, "encode Last-Modified header")
				}
			}
		}
		w.WriteHeader(206)

		writer := w
		if closer, ok := response.Response.Data.(io.Closer); ok {
			defer closer.Close()
		}
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeFilesUpdateResponse(response *File, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeFilesUpdatePartsResponse(response *FilesUpdatePartsNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeSharesGetByIdResponse(response *FileShareInfo, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeSharesListFilesResponse(response *FileList, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeSharesStreamResponse(response SharesStreamRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SharesStreamOKHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Accept-Ranges" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Accept-Ranges",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(string(response.AcceptRanges)))
				}); err != nil {
					return errors.Wrap(err, "encode Accept-Ranges header")
				}
			}
			// Encode "Content-Disposition" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Disposition",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentDisposition))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Disposition header")
				}
			}
			// Encode "Content-Length" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentLength))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Length header")
				}
			}
			// Encode "Content-Range" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Range",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					if val, ok := response.ContentRange.Get(); ok {
						return e.EncodeValue(conv.StringToString(val))
					}
					return nil
				}); err != nil {
					return errors.Wrap(err, "encode Content-Range header")
				}
			}
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
			// Encode "Etag" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Etag",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.Etag))
				}); err != nil {
					return errors.Wrap(err, "encode Etag header")
				}
			}
			// Encode "Last-Modified" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Last-Modified",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.LastModified))
				}); err != nil {
					return errors.Wrap(err, "encode Last-Modified header")
				}
			}
		}
		w.WriteHeader(200)

		writer := w
		if closer, ok := response.Response.Data.(io.Closer); ok {
			defer closer.Close()
		}
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *SharesStreamPartialContentHeaders:
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "Accept-Ranges" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Accept-Ranges",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(string(response.AcceptRanges)))
				}); err != nil {
					return errors.Wrap(err, "encode Accept-Ranges header")
				}
			}
			// Encode "Content-Disposition" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Disposition",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentDisposition))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Disposition header")
				}
			}
			// Encode "Content-Length" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentLength))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Length header")
				}
			}
			// Encode "Content-Range" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Range",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					if val, ok := response.ContentRange.Get(); ok {
						return e.EncodeValue(conv.StringToString(val))
					}
					return nil
				}); err != nil {
					return errors.Wrap(err, "encode Content-Range header")
				}
			}
			// Encode "Content-Type" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Content-Type",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.ContentType))
				}); err != nil {
					return errors.Wrap(err, "encode Content-Type header")
				}
			}
			// Encode "Etag" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Etag",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.Etag))
				}); err != nil {
					return errors.Wrap(err, "encode Etag header")
				}
			}
			// Encode "Last-Modified" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "Last-Modified",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					return e.EncodeValue(conv.StringToString(response.LastModified))
				}); err != nil {
					return errors.Wrap(err, "encode Last-Modified header")
				}
			}
		}
		w.WriteHeader(206)

		writer := w
		if closer, ok := response.Response.Data.(io.Closer); ok {
			defer closer.Close()
		}
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSharesUnlockResponse(response *SharesUnlockNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUploadsDeleteResponse(response *UploadsDeleteNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUploadsPartsByIdResponse(response []UploadPart, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUploadsStatsResponse(response []UploadStats, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUploadsUploadResponse(response *UploadPart, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUsersAddBotsResponse(response *UsersAddBotsNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUsersCreateChannelResponse(response *UsersCreateChannelCreated, w http.ResponseWriter) error {
	w.WriteHeader(201)

	return nil
}

func encodeUsersDeleteChannelResponse(response *UsersDeleteChannelNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUsersListChannelsResponse(response []Channel, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUsersListSessionsResponse(response []UserSession, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	e.ArrStart()
	for _, elem := range response {
		elem.Encode(e)
	}
	e.ArrEnd()
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUsersProfileImageResponse(response *UsersProfileImageOKHeaders, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/jpeg")
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Cache-Control" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Cache-Control",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(response.CacheControl))
			}); err != nil {
				return errors.Wrap(err, "encode Cache-Control header")
			}
		}
		// Encode "Content-Disposition" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Content-Disposition",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(response.ContentDisposition))
			}); err != nil {
				return errors.Wrap(err, "encode Content-Disposition header")
			}
		}
		// Encode "Content-Length" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Content-Length",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.Int64ToString(response.ContentLength))
			}); err != nil {
				return errors.Wrap(err, "encode Content-Length header")
			}
		}
		// Encode "Etag" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Etag",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.StringToString(response.Etag))
			}); err != nil {
				return errors.Wrap(err, "encode Etag header")
			}
		}
	}
	w.WriteHeader(200)

	writer := w
	if closer, ok := response.Response.Data.(io.Closer); ok {
		defer closer.Close()
	}
	if _, err := io.Copy(writer, response.Response); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUsersRemoveBotsResponse(response *UsersRemoveBotsNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUsersRemoveSessionResponse(response *UsersRemoveSessionNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUsersStatsResponse(response *UserConfig, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeUsersSyncChannelsResponse(response *UsersSyncChannelsNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeUsersUpdateChannelResponse(response *UsersUpdateChannelNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeVersionVersionResponse(response *ApiVersion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeErrorResponse(response *ErrorStatusCode, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil

}
