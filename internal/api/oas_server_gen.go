// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AuthLogin implements Auth_login operation.
	//
	// Login.
	//
	// POST /auth/login
	AuthLogin(ctx context.Context, req *SessionCreate) (*AuthLoginNoContent, error)
	// AuthLogout implements Auth_logout operation.
	//
	// Logout.
	//
	// POST /auth/logout
	AuthLogout(ctx context.Context) (*AuthLogoutNoContent, error)
	// AuthSession implements Auth_session operation.
	//
	// Get session information.
	//
	// GET /auth/session
	AuthSession(ctx context.Context, params AuthSessionParams) (AuthSessionRes, error)
	// AuthWs implements Auth_ws operation.
	//
	// Websocket QR Login.
	//
	// GET /auth/ws
	AuthWs(ctx context.Context) error
	// EventsGetEvents implements Events_getEvents operation.
	//
	// Get events.
	//
	// GET /events
	EventsGetEvents(ctx context.Context) ([]Event, error)
	// FilesCategoryStats implements Files_categoryStats operation.
	//
	// Get category stats.
	//
	// GET /files/categories
	FilesCategoryStats(ctx context.Context) ([]CategoryStats, error)
	// FilesCopy implements Files_copy operation.
	//
	// Copy file.
	//
	// POST /files/{id}/copy
	FilesCopy(ctx context.Context, req *FileCopy, params FilesCopyParams) (*File, error)
	// FilesCreate implements Files_create operation.
	//
	// Create a new file.
	//
	// POST /files
	FilesCreate(ctx context.Context, req *File) (*File, error)
	// FilesCreateShare implements Files_createShare operation.
	//
	// Create a share for the file.
	//
	// POST /files/{id}/share
	FilesCreateShare(ctx context.Context, req *FileShareCreate, params FilesCreateShareParams) error
	// FilesDelete implements Files_delete operation.
	//
	// Delete files.
	//
	// POST /files/delete
	FilesDelete(ctx context.Context, req *FileDelete) error
	// FilesDeleteShare implements Files_deleteShare operation.
	//
	// Delete share.
	//
	// DELETE /files/{id}/share
	FilesDeleteShare(ctx context.Context, params FilesDeleteShareParams) error
	// FilesEditShare implements Files_editShare operation.
	//
	// Edit share.
	//
	// PATCH /files/{id}/share
	FilesEditShare(ctx context.Context, req *FileShareCreate, params FilesEditShareParams) error
	// FilesGetById implements Files_getById operation.
	//
	// Get file by ID.
	//
	// GET /files/{id}
	FilesGetById(ctx context.Context, params FilesGetByIdParams) (*File, error)
	// FilesList implements Files_list operation.
	//
	// List all files.
	//
	// GET /files
	FilesList(ctx context.Context, params FilesListParams) (*FileList, error)
	// FilesMkdir implements Files_mkdir operation.
	//
	// Create Folders.
	//
	// POST /files/mkdir
	FilesMkdir(ctx context.Context, req *FileMkDir) error
	// FilesMove implements Files_move operation.
	//
	// Move files.
	//
	// POST /files/move
	FilesMove(ctx context.Context, req *FileMove) error
	// FilesShareByid implements Files_shareByid operation.
	//
	// Get share by file ID.
	//
	// GET /files/{id}/share
	FilesShareByid(ctx context.Context, params FilesShareByidParams) (*FileShare, error)
	// FilesStream implements Files_stream operation.
	//
	// Stream or Download file.
	//
	// GET /files/{id}/{name}
	FilesStream(ctx context.Context, params FilesStreamParams) (FilesStreamRes, error)
	// FilesUpdate implements Files_update operation.
	//
	// Update file.
	//
	// PATCH /files/{id}
	FilesUpdate(ctx context.Context, req *FileUpdate, params FilesUpdateParams) (*File, error)
	// FilesUpdateParts implements Files_updateParts operation.
	//
	// Update file parts.
	//
	// PUT /files/{id}/parts
	FilesUpdateParts(ctx context.Context, req *FilePartsUpdate, params FilesUpdatePartsParams) error
	// SharesGetById implements Shares_getById operation.
	//
	// Get share by ID.
	//
	// GET /shares/{id}
	SharesGetById(ctx context.Context, params SharesGetByIdParams) (*FileShareInfo, error)
	// SharesListFiles implements Shares_listFiles operation.
	//
	// List files in share.
	//
	// GET /shares/{id}/files
	SharesListFiles(ctx context.Context, params SharesListFilesParams) (*FileList, error)
	// SharesStream implements Shares_stream operation.
	//
	// Stream or Download shared file.
	//
	// GET /shares/{id}/files/{fileId}/{name}
	SharesStream(ctx context.Context, params SharesStreamParams) (SharesStreamRes, error)
	// SharesUnlock implements Shares_unlock operation.
	//
	// Unlock share.
	//
	// POST /shares/{id}/unlock
	SharesUnlock(ctx context.Context, req *ShareUnlock, params SharesUnlockParams) error
	// UploadsDelete implements Uploads_delete operation.
	//
	// Delete uploaded file.
	//
	// DELETE /uploads/{id}
	UploadsDelete(ctx context.Context, params UploadsDeleteParams) error
	// UploadsPartsById implements Uploads_partsById operation.
	//
	// Get uploaded parts by ID.
	//
	// GET /uploads/{id}
	UploadsPartsById(ctx context.Context, params UploadsPartsByIdParams) ([]UploadPart, error)
	// UploadsStats implements Uploads_stats operation.
	//
	// Get upload stats.
	//
	// GET /uploads/stats
	UploadsStats(ctx context.Context, params UploadsStatsParams) ([]UploadStats, error)
	// UploadsUpload implements Uploads_upload operation.
	//
	// Upload file.
	//
	// POST /uploads/{id}
	UploadsUpload(ctx context.Context, req *UploadsUploadReqWithContentType, params UploadsUploadParams) (*UploadPart, error)
	// UsersAddBots implements Users_addBots operation.
	//
	// Add bots to user account.
	//
	// POST /users/bots
	UsersAddBots(ctx context.Context, req *AddBots) error
	// UsersCreateChannel implements Users_createChannel operation.
	//
	// Create user channel.
	//
	// POST /users/channels
	UsersCreateChannel(ctx context.Context, req *Channel) error
	// UsersDeleteChannel implements Users_deleteChannel operation.
	//
	// Delete user channel.
	//
	// DELETE /users/channels/{id}
	UsersDeleteChannel(ctx context.Context, params UsersDeleteChannelParams) error
	// UsersListChannels implements Users_listChannels operation.
	//
	// List user channels.
	//
	// GET /users/channels
	UsersListChannels(ctx context.Context) ([]Channel, error)
	// UsersListSessions implements Users_listSessions operation.
	//
	// List user sessions.
	//
	// GET /users/sessions
	UsersListSessions(ctx context.Context) ([]UserSession, error)
	// UsersProfileImage implements Users_profileImage operation.
	//
	// Get user profile photo.
	//
	// GET /users/profile/{name}
	UsersProfileImage(ctx context.Context, params UsersProfileImageParams) (*UsersProfileImageOKHeaders, error)
	// UsersRemoveBots implements Users_removeBots operation.
	//
	// Remove bots from user account.
	//
	// DELETE /users/bots
	UsersRemoveBots(ctx context.Context) error
	// UsersRemoveSession implements Users_removeSession operation.
	//
	// Remove user session.
	//
	// DELETE /users/sessions/{id}
	UsersRemoveSession(ctx context.Context, params UsersRemoveSessionParams) error
	// UsersStats implements Users_stats operation.
	//
	// Get user config.
	//
	// GET /users/config
	UsersStats(ctx context.Context) (*UserConfig, error)
	// UsersSyncChannels implements Users_syncChannels operation.
	//
	// Sync user channels.
	//
	// PATCH /users/channels/sync
	UsersSyncChannels(ctx context.Context) error
	// UsersUpdateChannel implements Users_updateChannel operation.
	//
	// Update user channel.
	//
	// PATCH /users/channels
	UsersUpdateChannel(ctx context.Context, req *ChannelUpdate) error
	// VersionVersion implements Version_version operation.
	//
	// Get API version.
	//
	// GET /version
	VersionVersion(ctx context.Context) (*ApiVersion, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
