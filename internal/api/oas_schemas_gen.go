// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AddBots
type AddBots struct {
	// List of bot tokens.
	Bots []string `json:"bots"`
}

// GetBots returns the value of Bots.
func (s *AddBots) GetBots() []string {
	return s.Bots
}

// SetBots sets the value of Bots.
func (s *AddBots) SetBots(val []string) {
	s.Bots = val
}

type ApiKeyAuth struct {
	APIKey string
	Roles  []string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// GetRoles returns the value of Roles.
func (s *ApiKeyAuth) GetRoles() []string {
	return s.Roles
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// SetRoles sets the value of Roles.
func (s *ApiKeyAuth) SetRoles(val []string) {
	s.Roles = val
}

// Ref: #/components/schemas/ApiVersion
type ApiVersion struct {
	// API version.
	Version string `json:"version"`
	// Git commit SHA.
	CommitSHA string `json:"commitSHA"`
	// Go version.
	GoVersion string `json:"goVersion"`
	// Operating system.
	Os string `json:"os"`
	// Architecture.
	Arch string `json:"arch"`
}

// GetVersion returns the value of Version.
func (s *ApiVersion) GetVersion() string {
	return s.Version
}

// GetCommitSHA returns the value of CommitSHA.
func (s *ApiVersion) GetCommitSHA() string {
	return s.CommitSHA
}

// GetGoVersion returns the value of GoVersion.
func (s *ApiVersion) GetGoVersion() string {
	return s.GoVersion
}

// GetOs returns the value of Os.
func (s *ApiVersion) GetOs() string {
	return s.Os
}

// GetArch returns the value of Arch.
func (s *ApiVersion) GetArch() string {
	return s.Arch
}

// SetVersion sets the value of Version.
func (s *ApiVersion) SetVersion(val string) {
	s.Version = val
}

// SetCommitSHA sets the value of CommitSHA.
func (s *ApiVersion) SetCommitSHA(val string) {
	s.CommitSHA = val
}

// SetGoVersion sets the value of GoVersion.
func (s *ApiVersion) SetGoVersion(val string) {
	s.GoVersion = val
}

// SetOs sets the value of Os.
func (s *ApiVersion) SetOs(val string) {
	s.Os = val
}

// SetArch sets the value of Arch.
func (s *ApiVersion) SetArch(val string) {
	s.Arch = val
}

// AuthLoginNoContent is response for AuthLogin operation.
type AuthLoginNoContent struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthLoginNoContent) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthLoginNoContent) SetSetCookie(val string) {
	s.SetCookie = val
}

// AuthLogoutNoContent is response for AuthLogout operation.
type AuthLogoutNoContent struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *AuthLogoutNoContent) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *AuthLogoutNoContent) SetSetCookie(val string) {
	s.SetCookie = val
}

// AuthSessionNoContent is response for AuthSession operation.
type AuthSessionNoContent struct{}

func (*AuthSessionNoContent) authSessionRes() {}

// AuthWsSwitchingProtocols is response for AuthWs operation.
type AuthWsSwitchingProtocols struct{}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

// Supported file categories.
// Ref: #/components/schemas/Category
type Category string

const (
	CategoryArchive  Category = "archive"
	CategoryAudio    Category = "audio"
	CategoryDocument Category = "document"
	CategoryImage    Category = "image"
	CategoryOther    Category = "other"
	CategoryVideo    Category = "video"
)

// AllValues returns all Category values.
func (Category) AllValues() []Category {
	return []Category{
		CategoryArchive,
		CategoryAudio,
		CategoryDocument,
		CategoryImage,
		CategoryOther,
		CategoryVideo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Category) MarshalText() ([]byte, error) {
	switch s {
	case CategoryArchive:
		return []byte(s), nil
	case CategoryAudio:
		return []byte(s), nil
	case CategoryDocument:
		return []byte(s), nil
	case CategoryImage:
		return []byte(s), nil
	case CategoryOther:
		return []byte(s), nil
	case CategoryVideo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Category) UnmarshalText(data []byte) error {
	switch Category(data) {
	case CategoryArchive:
		*s = CategoryArchive
		return nil
	case CategoryAudio:
		*s = CategoryAudio
		return nil
	case CategoryDocument:
		*s = CategoryDocument
		return nil
	case CategoryImage:
		*s = CategoryImage
		return nil
	case CategoryOther:
		*s = CategoryOther
		return nil
	case CategoryVideo:
		*s = CategoryVideo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Statistics for files by category.
// Ref: #/components/schemas/CategoryStats
type CategoryStats struct {
	// Total number of files.
	TotalFiles int64 `json:"totalFiles"`
	// Total size of files in bytes.
	TotalSize int64 `json:"totalSize"`
	// Category name.
	Category Category `json:"category"`
}

// GetTotalFiles returns the value of TotalFiles.
func (s *CategoryStats) GetTotalFiles() int64 {
	return s.TotalFiles
}

// GetTotalSize returns the value of TotalSize.
func (s *CategoryStats) GetTotalSize() int64 {
	return s.TotalSize
}

// GetCategory returns the value of Category.
func (s *CategoryStats) GetCategory() Category {
	return s.Category
}

// SetTotalFiles sets the value of TotalFiles.
func (s *CategoryStats) SetTotalFiles(val int64) {
	s.TotalFiles = val
}

// SetTotalSize sets the value of TotalSize.
func (s *CategoryStats) SetTotalSize(val int64) {
	s.TotalSize = val
}

// SetCategory sets the value of Category.
func (s *CategoryStats) SetCategory(val Category) {
	s.Category = val
}

// Telegram channel information.
// Ref: #/components/schemas/Channel
type Channel struct {
	// Name of the Telegram channel.
	ChannelName string `json:"channelName"`
	// Unique numeric identifier of the channel.
	ChannelId OptInt64 `json:"channelId"`
}

// GetChannelName returns the value of ChannelName.
func (s *Channel) GetChannelName() string {
	return s.ChannelName
}

// GetChannelId returns the value of ChannelId.
func (s *Channel) GetChannelId() OptInt64 {
	return s.ChannelId
}

// SetChannelName sets the value of ChannelName.
func (s *Channel) SetChannelName(val string) {
	s.ChannelName = val
}

// SetChannelId sets the value of ChannelId.
func (s *Channel) SetChannelId(val OptInt64) {
	s.ChannelId = val
}

// Telegram channel information.
// Ref: #/components/schemas/ChannelUpdate
type ChannelUpdate struct {
	// Name of the Telegram channel.
	ChannelName OptString `json:"channelName"`
	// Unique numeric identifier of the channel.
	ChannelId OptInt64 `json:"channelId"`
}

// GetChannelName returns the value of ChannelName.
func (s *ChannelUpdate) GetChannelName() OptString {
	return s.ChannelName
}

// GetChannelId returns the value of ChannelId.
func (s *ChannelUpdate) GetChannelId() OptInt64 {
	return s.ChannelId
}

// SetChannelName sets the value of ChannelName.
func (s *ChannelUpdate) SetChannelName(val OptString) {
	s.ChannelName = val
}

// SetChannelId sets the value of ChannelId.
func (s *ChannelUpdate) SetChannelId(val OptInt64) {
	s.ChannelId = val
}

// Standard error response.
// Ref: #/components/schemas/Error
type Error struct {
	// Error code.
	Code int `json:"code"`
	// Error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Event information.
// Ref: #/components/schemas/Event
type Event struct {
	// Event ID.
	ID string `json:"id"`
	// Event type.
	Type string `json:"type"`
	// Event timestamp.
	CreatedAt time.Time `json:"createdAt"`
	// Event Source.
	Source Source `json:"source"`
}

// GetID returns the value of ID.
func (s *Event) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *Event) GetType() string {
	return s.Type
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Event) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetSource returns the value of Source.
func (s *Event) GetSource() Source {
	return s.Source
}

// SetID sets the value of ID.
func (s *Event) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Event) SetType(val string) {
	s.Type = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Event) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetSource sets the value of Source.
func (s *Event) SetSource(val Source) {
	s.Source = val
}

// File metadata.
// Ref: #/components/schemas/File
type File struct {
	// File ID.
	ID OptString `json:"id"`
	// File name.
	Name string `json:"name"`
	// File type.
	Type FileType `json:"type"`
	// File parts.
	Parts []Part `json:"parts"`
	// MIME type.
	MimeType OptString `json:"mimeType"`
	// File category.
	Category OptCategory `json:"category"`
	// Channel ID.
	ChannelId OptInt64 `json:"channelId"`
	// File or Folder path.
	Path OptString `json:"path"`
	// Parent folder ID.
	ParentId OptString `json:"parentId"`
	// File size in bytes.
	Size OptInt64 `json:"size"`
	// Encryption status.
	Encrypted OptBool `json:"encrypted"`
	// Last update time.
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *File) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *File) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *File) GetType() FileType {
	return s.Type
}

// GetParts returns the value of Parts.
func (s *File) GetParts() []Part {
	return s.Parts
}

// GetMimeType returns the value of MimeType.
func (s *File) GetMimeType() OptString {
	return s.MimeType
}

// GetCategory returns the value of Category.
func (s *File) GetCategory() OptCategory {
	return s.Category
}

// GetChannelId returns the value of ChannelId.
func (s *File) GetChannelId() OptInt64 {
	return s.ChannelId
}

// GetPath returns the value of Path.
func (s *File) GetPath() OptString {
	return s.Path
}

// GetParentId returns the value of ParentId.
func (s *File) GetParentId() OptString {
	return s.ParentId
}

// GetSize returns the value of Size.
func (s *File) GetSize() OptInt64 {
	return s.Size
}

// GetEncrypted returns the value of Encrypted.
func (s *File) GetEncrypted() OptBool {
	return s.Encrypted
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *File) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *File) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *File) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *File) SetType(val FileType) {
	s.Type = val
}

// SetParts sets the value of Parts.
func (s *File) SetParts(val []Part) {
	s.Parts = val
}

// SetMimeType sets the value of MimeType.
func (s *File) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetCategory sets the value of Category.
func (s *File) SetCategory(val OptCategory) {
	s.Category = val
}

// SetChannelId sets the value of ChannelId.
func (s *File) SetChannelId(val OptInt64) {
	s.ChannelId = val
}

// SetPath sets the value of Path.
func (s *File) SetPath(val OptString) {
	s.Path = val
}

// SetParentId sets the value of ParentId.
func (s *File) SetParentId(val OptString) {
	s.ParentId = val
}

// SetSize sets the value of Size.
func (s *File) SetSize(val OptInt64) {
	s.Size = val
}

// SetEncrypted sets the value of Encrypted.
func (s *File) SetEncrypted(val OptBool) {
	s.Encrypted = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *File) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// File Copy request.
// Ref: #/components/schemas/FileCopy
type FileCopy struct {
	// New file name.
	NewName OptString `json:"newName"`
	// Destination path for the copied file.
	Destination string `json:"destination"`
	// Last update time.
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetNewName returns the value of NewName.
func (s *FileCopy) GetNewName() OptString {
	return s.NewName
}

// GetDestination returns the value of Destination.
func (s *FileCopy) GetDestination() string {
	return s.Destination
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FileCopy) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetNewName sets the value of NewName.
func (s *FileCopy) SetNewName(val OptString) {
	s.NewName = val
}

// SetDestination sets the value of Destination.
func (s *FileCopy) SetDestination(val string) {
	s.Destination = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FileCopy) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Delete operation request.
// Ref: #/components/schemas/FileDelete
type FileDelete struct {
	// Array of file or folders ids to be deleted.
	Ids []string `json:"ids"`
}

// GetIds returns the value of Ids.
func (s *FileDelete) GetIds() []string {
	return s.Ids
}

// SetIds sets the value of Ids.
func (s *FileDelete) SetIds(val []string) {
	s.Ids = val
}

// Paginated file listing response with metadata.
// Ref: #/components/schemas/FileList
type FileList struct {
	// Array of file entries in the current page.
	Items []File `json:"items"`
	// Pagination metadata and total count information.
	Meta Meta `json:"meta"`
}

// GetItems returns the value of Items.
func (s *FileList) GetItems() []File {
	return s.Items
}

// GetMeta returns the value of Meta.
func (s *FileList) GetMeta() Meta {
	return s.Meta
}

// SetItems sets the value of Items.
func (s *FileList) SetItems(val []File) {
	s.Items = val
}

// SetMeta sets the value of Meta.
func (s *FileList) SetMeta(val Meta) {
	s.Meta = val
}

// Request to create directories.
// Ref: #/components/schemas/FileMkDir
type FileMkDir struct {
	// Directory path to be created.
	Path string `json:"path"`
}

// GetPath returns the value of Path.
func (s *FileMkDir) GetPath() string {
	return s.Path
}

// SetPath sets the value of Path.
func (s *FileMkDir) SetPath(val string) {
	s.Path = val
}

// Move multiple files by ids or path.
// Ref: #/components/schemas/FileMove
type FileMove struct {
	// Array of file or folders ids to be moved.
	Ids []string `json:"ids"`
	// Destination parent path or ID where files will be moved to.
	DestinationParent string `json:"destinationParent"`
	// Destination file or folder name.
	DestinationName OptString `json:"destinationName"`
}

// GetIds returns the value of Ids.
func (s *FileMove) GetIds() []string {
	return s.Ids
}

// GetDestinationParent returns the value of DestinationParent.
func (s *FileMove) GetDestinationParent() string {
	return s.DestinationParent
}

// GetDestinationName returns the value of DestinationName.
func (s *FileMove) GetDestinationName() OptString {
	return s.DestinationName
}

// SetIds sets the value of Ids.
func (s *FileMove) SetIds(val []string) {
	s.Ids = val
}

// SetDestinationParent sets the value of DestinationParent.
func (s *FileMove) SetDestinationParent(val string) {
	s.DestinationParent = val
}

// SetDestinationName sets the value of DestinationName.
func (s *FileMove) SetDestinationName(val OptString) {
	s.DestinationName = val
}

// File parts update request.
// Ref: #/components/schemas/FilePartsUpdate
type FilePartsUpdate struct {
	// File name.
	Name OptString `json:"name"`
	// Parent folder ID.
	ParentId OptString `json:"parentId"`
	// Channel ID.
	ChannelId OptInt64 `json:"channelId"`
	// Upload ID.
	UploadId OptString `json:"uploadId"`
	// File parts.
	Parts []Part `json:"parts"`
	// Indicates if the part is encrypted.
	Encrypted OptBool `json:"encrypted"`
	// File size in bytes.
	Size int64 `json:"size"`
	// Last update time.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetName returns the value of Name.
func (s *FilePartsUpdate) GetName() OptString {
	return s.Name
}

// GetParentId returns the value of ParentId.
func (s *FilePartsUpdate) GetParentId() OptString {
	return s.ParentId
}

// GetChannelId returns the value of ChannelId.
func (s *FilePartsUpdate) GetChannelId() OptInt64 {
	return s.ChannelId
}

// GetUploadId returns the value of UploadId.
func (s *FilePartsUpdate) GetUploadId() OptString {
	return s.UploadId
}

// GetParts returns the value of Parts.
func (s *FilePartsUpdate) GetParts() []Part {
	return s.Parts
}

// GetEncrypted returns the value of Encrypted.
func (s *FilePartsUpdate) GetEncrypted() OptBool {
	return s.Encrypted
}

// GetSize returns the value of Size.
func (s *FilePartsUpdate) GetSize() int64 {
	return s.Size
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FilePartsUpdate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetName sets the value of Name.
func (s *FilePartsUpdate) SetName(val OptString) {
	s.Name = val
}

// SetParentId sets the value of ParentId.
func (s *FilePartsUpdate) SetParentId(val OptString) {
	s.ParentId = val
}

// SetChannelId sets the value of ChannelId.
func (s *FilePartsUpdate) SetChannelId(val OptInt64) {
	s.ChannelId = val
}

// SetUploadId sets the value of UploadId.
func (s *FilePartsUpdate) SetUploadId(val OptString) {
	s.UploadId = val
}

// SetParts sets the value of Parts.
func (s *FilePartsUpdate) SetParts(val []Part) {
	s.Parts = val
}

// SetEncrypted sets the value of Encrypted.
func (s *FilePartsUpdate) SetEncrypted(val OptBool) {
	s.Encrypted = val
}

// SetSize sets the value of Size.
func (s *FilePartsUpdate) SetSize(val int64) {
	s.Size = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FilePartsUpdate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type FileQueryOperation string

const (
	FileQueryOperationList FileQueryOperation = "list"
	FileQueryOperationFind FileQueryOperation = "find"
)

// AllValues returns all FileQueryOperation values.
func (FileQueryOperation) AllValues() []FileQueryOperation {
	return []FileQueryOperation{
		FileQueryOperationList,
		FileQueryOperationFind,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQueryOperation) MarshalText() ([]byte, error) {
	switch s {
	case FileQueryOperationList:
		return []byte(s), nil
	case FileQueryOperationFind:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQueryOperation) UnmarshalText(data []byte) error {
	switch FileQueryOperation(data) {
	case FileQueryOperationList:
		*s = FileQueryOperationList
		return nil
	case FileQueryOperationFind:
		*s = FileQueryOperationFind
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileQueryOrder string

const (
	FileQueryOrderAsc  FileQueryOrder = "asc"
	FileQueryOrderDesc FileQueryOrder = "desc"
)

// AllValues returns all FileQueryOrder values.
func (FileQueryOrder) AllValues() []FileQueryOrder {
	return []FileQueryOrder{
		FileQueryOrderAsc,
		FileQueryOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQueryOrder) MarshalText() ([]byte, error) {
	switch s {
	case FileQueryOrderAsc:
		return []byte(s), nil
	case FileQueryOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQueryOrder) UnmarshalText(data []byte) error {
	switch FileQueryOrder(data) {
	case FileQueryOrderAsc:
		*s = FileQueryOrderAsc
		return nil
	case FileQueryOrderDesc:
		*s = FileQueryOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileQuerySearchType string

const (
	FileQuerySearchTypeText  FileQuerySearchType = "text"
	FileQuerySearchTypeRegex FileQuerySearchType = "regex"
)

// AllValues returns all FileQuerySearchType values.
func (FileQuerySearchType) AllValues() []FileQuerySearchType {
	return []FileQuerySearchType{
		FileQuerySearchTypeText,
		FileQuerySearchTypeRegex,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQuerySearchType) MarshalText() ([]byte, error) {
	switch s {
	case FileQuerySearchTypeText:
		return []byte(s), nil
	case FileQuerySearchTypeRegex:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQuerySearchType) UnmarshalText(data []byte) error {
	switch FileQuerySearchType(data) {
	case FileQuerySearchTypeText:
		*s = FileQuerySearchTypeText
		return nil
	case FileQuerySearchTypeRegex:
		*s = FileQuerySearchTypeRegex
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileQuerySort string

const (
	FileQuerySortName      FileQuerySort = "name"
	FileQuerySortUpdatedAt FileQuerySort = "updatedAt"
	FileQuerySortSize      FileQuerySort = "size"
	FileQuerySortID        FileQuerySort = "id"
)

// AllValues returns all FileQuerySort values.
func (FileQuerySort) AllValues() []FileQuerySort {
	return []FileQuerySort{
		FileQuerySortName,
		FileQuerySortUpdatedAt,
		FileQuerySortSize,
		FileQuerySortID,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQuerySort) MarshalText() ([]byte, error) {
	switch s {
	case FileQuerySortName:
		return []byte(s), nil
	case FileQuerySortUpdatedAt:
		return []byte(s), nil
	case FileQuerySortSize:
		return []byte(s), nil
	case FileQuerySortID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQuerySort) UnmarshalText(data []byte) error {
	switch FileQuerySort(data) {
	case FileQuerySortName:
		*s = FileQuerySortName
		return nil
	case FileQuerySortUpdatedAt:
		*s = FileQuerySortUpdatedAt
		return nil
	case FileQuerySortSize:
		*s = FileQuerySortSize
		return nil
	case FileQuerySortID:
		*s = FileQuerySortID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileQueryStatus string

const (
	FileQueryStatusActive          FileQueryStatus = "active"
	FileQueryStatusPendingDeletion FileQueryStatus = "pending_deletion"
)

// AllValues returns all FileQueryStatus values.
func (FileQueryStatus) AllValues() []FileQueryStatus {
	return []FileQueryStatus{
		FileQueryStatusActive,
		FileQueryStatusPendingDeletion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQueryStatus) MarshalText() ([]byte, error) {
	switch s {
	case FileQueryStatusActive:
		return []byte(s), nil
	case FileQueryStatusPendingDeletion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQueryStatus) UnmarshalText(data []byte) error {
	switch FileQueryStatus(data) {
	case FileQueryStatusActive:
		*s = FileQueryStatusActive
		return nil
	case FileQueryStatusPendingDeletion:
		*s = FileQueryStatusPendingDeletion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileQueryType string

const (
	FileQueryTypeFolder FileQueryType = "folder"
	FileQueryTypeFile   FileQueryType = "file"
)

// AllValues returns all FileQueryType values.
func (FileQueryType) AllValues() []FileQueryType {
	return []FileQueryType{
		FileQueryTypeFolder,
		FileQueryTypeFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileQueryType) MarshalText() ([]byte, error) {
	switch s {
	case FileQueryTypeFolder:
		return []byte(s), nil
	case FileQueryTypeFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileQueryType) UnmarshalText(data []byte) error {
	switch FileQueryType(data) {
	case FileQueryTypeFolder:
		*s = FileQueryTypeFolder
		return nil
	case FileQueryTypeFile:
		*s = FileQueryTypeFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// File sharing information and settings.
// Ref: #/components/schemas/FileShare
type FileShare struct {
	// Share ID.
	ID string `json:"id"`
	// Indicates if the shared file requires password protection.
	Protected bool `json:"protected"`
	// ID of the user who created the share.
	UserId OptInt64 `json:"userId"`
	// File type.
	Type FileShareType `json:"type"`
	// Name of the shared file or folder.
	Name string `json:"name"`
	// Expiration date and time of the share link.
	ExpiresAt OptDateTime `json:"expiresAt"`
}

// GetID returns the value of ID.
func (s *FileShare) GetID() string {
	return s.ID
}

// GetProtected returns the value of Protected.
func (s *FileShare) GetProtected() bool {
	return s.Protected
}

// GetUserId returns the value of UserId.
func (s *FileShare) GetUserId() OptInt64 {
	return s.UserId
}

// GetType returns the value of Type.
func (s *FileShare) GetType() FileShareType {
	return s.Type
}

// GetName returns the value of Name.
func (s *FileShare) GetName() string {
	return s.Name
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *FileShare) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// SetID sets the value of ID.
func (s *FileShare) SetID(val string) {
	s.ID = val
}

// SetProtected sets the value of Protected.
func (s *FileShare) SetProtected(val bool) {
	s.Protected = val
}

// SetUserId sets the value of UserId.
func (s *FileShare) SetUserId(val OptInt64) {
	s.UserId = val
}

// SetType sets the value of Type.
func (s *FileShare) SetType(val FileShareType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *FileShare) SetName(val string) {
	s.Name = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *FileShare) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// File share creation request.
// Ref: #/components/schemas/FileShareCreate
type FileShareCreate struct {
	// Share password.
	Password OptString `json:"password"`
	// Share expiration date.
	ExpiresAt OptDateTime `json:"expiresAt"`
}

// GetPassword returns the value of Password.
func (s *FileShareCreate) GetPassword() OptString {
	return s.Password
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *FileShareCreate) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// SetPassword sets the value of Password.
func (s *FileShareCreate) SetPassword(val OptString) {
	s.Password = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *FileShareCreate) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/FileShareInfo
type FileShareInfo struct {
	// File name.
	Name string `json:"name"`
	// File type.
	Type FileShareInfoType `json:"type"`
	// Share expiration date.
	ExpiresAt OptDateTime `json:"expiresAt"`
	// Share User ID.
	UserId int64 `json:"userId"`
	// Share Protection Status.
	Protected bool `json:"protected"`
}

// GetName returns the value of Name.
func (s *FileShareInfo) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *FileShareInfo) GetType() FileShareInfoType {
	return s.Type
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *FileShareInfo) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// GetUserId returns the value of UserId.
func (s *FileShareInfo) GetUserId() int64 {
	return s.UserId
}

// GetProtected returns the value of Protected.
func (s *FileShareInfo) GetProtected() bool {
	return s.Protected
}

// SetName sets the value of Name.
func (s *FileShareInfo) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *FileShareInfo) SetType(val FileShareInfoType) {
	s.Type = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *FileShareInfo) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// SetUserId sets the value of UserId.
func (s *FileShareInfo) SetUserId(val int64) {
	s.UserId = val
}

// SetProtected sets the value of Protected.
func (s *FileShareInfo) SetProtected(val bool) {
	s.Protected = val
}

// File type.
type FileShareInfoType string

const (
	FileShareInfoTypeFolder FileShareInfoType = "folder"
	FileShareInfoTypeFile   FileShareInfoType = "file"
)

// AllValues returns all FileShareInfoType values.
func (FileShareInfoType) AllValues() []FileShareInfoType {
	return []FileShareInfoType{
		FileShareInfoTypeFolder,
		FileShareInfoTypeFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileShareInfoType) MarshalText() ([]byte, error) {
	switch s {
	case FileShareInfoTypeFolder:
		return []byte(s), nil
	case FileShareInfoTypeFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileShareInfoType) UnmarshalText(data []byte) error {
	switch FileShareInfoType(data) {
	case FileShareInfoTypeFolder:
		*s = FileShareInfoTypeFolder
		return nil
	case FileShareInfoTypeFile:
		*s = FileShareInfoTypeFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// File type.
type FileShareType string

const (
	FileShareTypeFolder FileShareType = "folder"
	FileShareTypeFile   FileShareType = "file"
)

// AllValues returns all FileShareType values.
func (FileShareType) AllValues() []FileShareType {
	return []FileShareType{
		FileShareTypeFolder,
		FileShareTypeFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileShareType) MarshalText() ([]byte, error) {
	switch s {
	case FileShareTypeFolder:
		return []byte(s), nil
	case FileShareTypeFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileShareType) UnmarshalText(data []byte) error {
	switch FileShareType(data) {
	case FileShareTypeFolder:
		*s = FileShareTypeFolder
		return nil
	case FileShareTypeFile:
		*s = FileShareTypeFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// File type.
type FileType string

const (
	FileTypeFolder FileType = "folder"
	FileTypeFile   FileType = "file"
)

// AllValues returns all FileType values.
func (FileType) AllValues() []FileType {
	return []FileType{
		FileTypeFolder,
		FileTypeFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileType) MarshalText() ([]byte, error) {
	switch s {
	case FileTypeFolder:
		return []byte(s), nil
	case FileTypeFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileType) UnmarshalText(data []byte) error {
	switch FileType(data) {
	case FileTypeFolder:
		*s = FileTypeFolder
		return nil
	case FileTypeFile:
		*s = FileTypeFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// File update request.
// Ref: #/components/schemas/FileUpdate
type FileUpdate struct {
	// File name.
	Name OptString `json:"name"`
	// File parts.
	Parts []Part `json:"parts"`
	// File size in bytes.
	Size OptInt64 `json:"size"`
	// Last update time.
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetName returns the value of Name.
func (s *FileUpdate) GetName() OptString {
	return s.Name
}

// GetParts returns the value of Parts.
func (s *FileUpdate) GetParts() []Part {
	return s.Parts
}

// GetSize returns the value of Size.
func (s *FileUpdate) GetSize() OptInt64 {
	return s.Size
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FileUpdate) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetName sets the value of Name.
func (s *FileUpdate) SetName(val OptString) {
	s.Name = val
}

// SetParts sets the value of Parts.
func (s *FileUpdate) SetParts(val []Part) {
	s.Parts = val
}

// SetSize sets the value of Size.
func (s *FileUpdate) SetSize(val OptInt64) {
	s.Size = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FileUpdate) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// FilesCreateShareCreated is response for FilesCreateShare operation.
type FilesCreateShareCreated struct{}

// FilesDeleteNoContent is response for FilesDelete operation.
type FilesDeleteNoContent struct{}

// FilesDeleteShareNoContent is response for FilesDeleteShare operation.
type FilesDeleteShareNoContent struct{}

// FilesEditShareNoContent is response for FilesEditShare operation.
type FilesEditShareNoContent struct{}

// FilesMkdirNoContent is response for FilesMkdir operation.
type FilesMkdirNoContent struct{}

// FilesMoveNoContent is response for FilesMove operation.
type FilesMoveNoContent struct{}

type FilesStreamDownload string

const (
	FilesStreamDownload0 FilesStreamDownload = "0"
	FilesStreamDownload1 FilesStreamDownload = "1"
)

// AllValues returns all FilesStreamDownload values.
func (FilesStreamDownload) AllValues() []FilesStreamDownload {
	return []FilesStreamDownload{
		FilesStreamDownload0,
		FilesStreamDownload1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilesStreamDownload) MarshalText() ([]byte, error) {
	switch s {
	case FilesStreamDownload0:
		return []byte(s), nil
	case FilesStreamDownload1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilesStreamDownload) UnmarshalText(data []byte) error {
	switch FilesStreamDownload(data) {
	case FilesStreamDownload0:
		*s = FilesStreamDownload0
		return nil
	case FilesStreamDownload1:
		*s = FilesStreamDownload1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FilesStreamOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FilesStreamOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type FilesStreamOKAcceptRanges string

const (
	FilesStreamOKAcceptRangesBytes FilesStreamOKAcceptRanges = "bytes"
)

// AllValues returns all FilesStreamOKAcceptRanges values.
func (FilesStreamOKAcceptRanges) AllValues() []FilesStreamOKAcceptRanges {
	return []FilesStreamOKAcceptRanges{
		FilesStreamOKAcceptRangesBytes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilesStreamOKAcceptRanges) MarshalText() ([]byte, error) {
	switch s {
	case FilesStreamOKAcceptRangesBytes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilesStreamOKAcceptRanges) UnmarshalText(data []byte) error {
	switch FilesStreamOKAcceptRanges(data) {
	case FilesStreamOKAcceptRangesBytes:
		*s = FilesStreamOKAcceptRangesBytes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// FilesStreamOKHeaders wraps FilesStreamOK with response headers.
type FilesStreamOKHeaders struct {
	AcceptRanges       FilesStreamOKAcceptRanges
	ContentDisposition string
	ContentLength      string
	ContentRange       OptString
	ContentType        string
	Etag               string
	LastModified       string
	Response           FilesStreamOK
}

// GetAcceptRanges returns the value of AcceptRanges.
func (s *FilesStreamOKHeaders) GetAcceptRanges() FilesStreamOKAcceptRanges {
	return s.AcceptRanges
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *FilesStreamOKHeaders) GetContentDisposition() string {
	return s.ContentDisposition
}

// GetContentLength returns the value of ContentLength.
func (s *FilesStreamOKHeaders) GetContentLength() string {
	return s.ContentLength
}

// GetContentRange returns the value of ContentRange.
func (s *FilesStreamOKHeaders) GetContentRange() OptString {
	return s.ContentRange
}

// GetContentType returns the value of ContentType.
func (s *FilesStreamOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetEtag returns the value of Etag.
func (s *FilesStreamOKHeaders) GetEtag() string {
	return s.Etag
}

// GetLastModified returns the value of LastModified.
func (s *FilesStreamOKHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *FilesStreamOKHeaders) GetResponse() FilesStreamOK {
	return s.Response
}

// SetAcceptRanges sets the value of AcceptRanges.
func (s *FilesStreamOKHeaders) SetAcceptRanges(val FilesStreamOKAcceptRanges) {
	s.AcceptRanges = val
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *FilesStreamOKHeaders) SetContentDisposition(val string) {
	s.ContentDisposition = val
}

// SetContentLength sets the value of ContentLength.
func (s *FilesStreamOKHeaders) SetContentLength(val string) {
	s.ContentLength = val
}

// SetContentRange sets the value of ContentRange.
func (s *FilesStreamOKHeaders) SetContentRange(val OptString) {
	s.ContentRange = val
}

// SetContentType sets the value of ContentType.
func (s *FilesStreamOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetEtag sets the value of Etag.
func (s *FilesStreamOKHeaders) SetEtag(val string) {
	s.Etag = val
}

// SetLastModified sets the value of LastModified.
func (s *FilesStreamOKHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *FilesStreamOKHeaders) SetResponse(val FilesStreamOK) {
	s.Response = val
}

func (*FilesStreamOKHeaders) filesStreamRes() {}

type FilesStreamPartialContent struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FilesStreamPartialContent) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type FilesStreamPartialContentAcceptRanges string

const (
	FilesStreamPartialContentAcceptRangesBytes FilesStreamPartialContentAcceptRanges = "bytes"
)

// AllValues returns all FilesStreamPartialContentAcceptRanges values.
func (FilesStreamPartialContentAcceptRanges) AllValues() []FilesStreamPartialContentAcceptRanges {
	return []FilesStreamPartialContentAcceptRanges{
		FilesStreamPartialContentAcceptRangesBytes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilesStreamPartialContentAcceptRanges) MarshalText() ([]byte, error) {
	switch s {
	case FilesStreamPartialContentAcceptRangesBytes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilesStreamPartialContentAcceptRanges) UnmarshalText(data []byte) error {
	switch FilesStreamPartialContentAcceptRanges(data) {
	case FilesStreamPartialContentAcceptRangesBytes:
		*s = FilesStreamPartialContentAcceptRangesBytes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// FilesStreamPartialContentHeaders wraps FilesStreamPartialContent with response headers.
type FilesStreamPartialContentHeaders struct {
	AcceptRanges       FilesStreamPartialContentAcceptRanges
	ContentDisposition string
	ContentLength      string
	ContentRange       OptString
	ContentType        string
	Etag               string
	LastModified       string
	Response           FilesStreamPartialContent
}

// GetAcceptRanges returns the value of AcceptRanges.
func (s *FilesStreamPartialContentHeaders) GetAcceptRanges() FilesStreamPartialContentAcceptRanges {
	return s.AcceptRanges
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *FilesStreamPartialContentHeaders) GetContentDisposition() string {
	return s.ContentDisposition
}

// GetContentLength returns the value of ContentLength.
func (s *FilesStreamPartialContentHeaders) GetContentLength() string {
	return s.ContentLength
}

// GetContentRange returns the value of ContentRange.
func (s *FilesStreamPartialContentHeaders) GetContentRange() OptString {
	return s.ContentRange
}

// GetContentType returns the value of ContentType.
func (s *FilesStreamPartialContentHeaders) GetContentType() string {
	return s.ContentType
}

// GetEtag returns the value of Etag.
func (s *FilesStreamPartialContentHeaders) GetEtag() string {
	return s.Etag
}

// GetLastModified returns the value of LastModified.
func (s *FilesStreamPartialContentHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *FilesStreamPartialContentHeaders) GetResponse() FilesStreamPartialContent {
	return s.Response
}

// SetAcceptRanges sets the value of AcceptRanges.
func (s *FilesStreamPartialContentHeaders) SetAcceptRanges(val FilesStreamPartialContentAcceptRanges) {
	s.AcceptRanges = val
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *FilesStreamPartialContentHeaders) SetContentDisposition(val string) {
	s.ContentDisposition = val
}

// SetContentLength sets the value of ContentLength.
func (s *FilesStreamPartialContentHeaders) SetContentLength(val string) {
	s.ContentLength = val
}

// SetContentRange sets the value of ContentRange.
func (s *FilesStreamPartialContentHeaders) SetContentRange(val OptString) {
	s.ContentRange = val
}

// SetContentType sets the value of ContentType.
func (s *FilesStreamPartialContentHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetEtag sets the value of Etag.
func (s *FilesStreamPartialContentHeaders) SetEtag(val string) {
	s.Etag = val
}

// SetLastModified sets the value of LastModified.
func (s *FilesStreamPartialContentHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *FilesStreamPartialContentHeaders) SetResponse(val FilesStreamPartialContent) {
	s.Response = val
}

func (*FilesStreamPartialContentHeaders) filesStreamRes() {}

// FilesUpdatePartsNoContent is response for FilesUpdateParts operation.
type FilesUpdatePartsNoContent struct{}

// Pagination metadata containing count, page information.
// Ref: #/components/schemas/Meta
type Meta struct {
	// Total number of items matching the query.
	Count int `json:"count"`
	// Total number of available pages based on limit.
	TotalPages int `json:"totalPages"`
	// Current page number in the pagination.
	CurrentPage int `json:"currentPage"`
}

// GetCount returns the value of Count.
func (s *Meta) GetCount() int {
	return s.Count
}

// GetTotalPages returns the value of TotalPages.
func (s *Meta) GetTotalPages() int {
	return s.TotalPages
}

// GetCurrentPage returns the value of CurrentPage.
func (s *Meta) GetCurrentPage() int {
	return s.CurrentPage
}

// SetCount sets the value of Count.
func (s *Meta) SetCount(val int) {
	s.Count = val
}

// SetTotalPages sets the value of TotalPages.
func (s *Meta) SetTotalPages(val int) {
	s.TotalPages = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *Meta) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQueryOperation returns new OptFileQueryOperation with value set to v.
func NewOptFileQueryOperation(v FileQueryOperation) OptFileQueryOperation {
	return OptFileQueryOperation{
		Value: v,
		Set:   true,
	}
}

// OptFileQueryOperation is optional FileQueryOperation.
type OptFileQueryOperation struct {
	Value FileQueryOperation
	Set   bool
}

// IsSet returns true if OptFileQueryOperation was set.
func (o OptFileQueryOperation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQueryOperation) Reset() {
	var v FileQueryOperation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQueryOperation) SetTo(v FileQueryOperation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQueryOperation) Get() (v FileQueryOperation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQueryOperation) Or(d FileQueryOperation) FileQueryOperation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQueryOrder returns new OptFileQueryOrder with value set to v.
func NewOptFileQueryOrder(v FileQueryOrder) OptFileQueryOrder {
	return OptFileQueryOrder{
		Value: v,
		Set:   true,
	}
}

// OptFileQueryOrder is optional FileQueryOrder.
type OptFileQueryOrder struct {
	Value FileQueryOrder
	Set   bool
}

// IsSet returns true if OptFileQueryOrder was set.
func (o OptFileQueryOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQueryOrder) Reset() {
	var v FileQueryOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQueryOrder) SetTo(v FileQueryOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQueryOrder) Get() (v FileQueryOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQueryOrder) Or(d FileQueryOrder) FileQueryOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQuerySearchType returns new OptFileQuerySearchType with value set to v.
func NewOptFileQuerySearchType(v FileQuerySearchType) OptFileQuerySearchType {
	return OptFileQuerySearchType{
		Value: v,
		Set:   true,
	}
}

// OptFileQuerySearchType is optional FileQuerySearchType.
type OptFileQuerySearchType struct {
	Value FileQuerySearchType
	Set   bool
}

// IsSet returns true if OptFileQuerySearchType was set.
func (o OptFileQuerySearchType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQuerySearchType) Reset() {
	var v FileQuerySearchType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQuerySearchType) SetTo(v FileQuerySearchType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQuerySearchType) Get() (v FileQuerySearchType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQuerySearchType) Or(d FileQuerySearchType) FileQuerySearchType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQuerySort returns new OptFileQuerySort with value set to v.
func NewOptFileQuerySort(v FileQuerySort) OptFileQuerySort {
	return OptFileQuerySort{
		Value: v,
		Set:   true,
	}
}

// OptFileQuerySort is optional FileQuerySort.
type OptFileQuerySort struct {
	Value FileQuerySort
	Set   bool
}

// IsSet returns true if OptFileQuerySort was set.
func (o OptFileQuerySort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQuerySort) Reset() {
	var v FileQuerySort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQuerySort) SetTo(v FileQuerySort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQuerySort) Get() (v FileQuerySort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQuerySort) Or(d FileQuerySort) FileQuerySort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQueryStatus returns new OptFileQueryStatus with value set to v.
func NewOptFileQueryStatus(v FileQueryStatus) OptFileQueryStatus {
	return OptFileQueryStatus{
		Value: v,
		Set:   true,
	}
}

// OptFileQueryStatus is optional FileQueryStatus.
type OptFileQueryStatus struct {
	Value FileQueryStatus
	Set   bool
}

// IsSet returns true if OptFileQueryStatus was set.
func (o OptFileQueryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQueryStatus) Reset() {
	var v FileQueryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQueryStatus) SetTo(v FileQueryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQueryStatus) Get() (v FileQueryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQueryStatus) Or(d FileQueryStatus) FileQueryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileQueryType returns new OptFileQueryType with value set to v.
func NewOptFileQueryType(v FileQueryType) OptFileQueryType {
	return OptFileQueryType{
		Value: v,
		Set:   true,
	}
}

// OptFileQueryType is optional FileQueryType.
type OptFileQueryType struct {
	Value FileQueryType
	Set   bool
}

// IsSet returns true if OptFileQueryType was set.
func (o OptFileQueryType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileQueryType) Reset() {
	var v FileQueryType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileQueryType) SetTo(v FileQueryType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileQueryType) Get() (v FileQueryType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileQueryType) Or(d FileQueryType) FileQueryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilesStreamDownload returns new OptFilesStreamDownload with value set to v.
func NewOptFilesStreamDownload(v FilesStreamDownload) OptFilesStreamDownload {
	return OptFilesStreamDownload{
		Value: v,
		Set:   true,
	}
}

// OptFilesStreamDownload is optional FilesStreamDownload.
type OptFilesStreamDownload struct {
	Value FilesStreamDownload
	Set   bool
}

// IsSet returns true if OptFilesStreamDownload was set.
func (o OptFilesStreamDownload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilesStreamDownload) Reset() {
	var v FilesStreamDownload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilesStreamDownload) SetTo(v FilesStreamDownload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilesStreamDownload) Get() (v FilesStreamDownload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilesStreamDownload) Or(d FilesStreamDownload) FilesStreamDownload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShareQueryOrder returns new OptShareQueryOrder with value set to v.
func NewOptShareQueryOrder(v ShareQueryOrder) OptShareQueryOrder {
	return OptShareQueryOrder{
		Value: v,
		Set:   true,
	}
}

// OptShareQueryOrder is optional ShareQueryOrder.
type OptShareQueryOrder struct {
	Value ShareQueryOrder
	Set   bool
}

// IsSet returns true if OptShareQueryOrder was set.
func (o OptShareQueryOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShareQueryOrder) Reset() {
	var v ShareQueryOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShareQueryOrder) SetTo(v ShareQueryOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShareQueryOrder) Get() (v ShareQueryOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShareQueryOrder) Or(d ShareQueryOrder) ShareQueryOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShareQuerySort returns new OptShareQuerySort with value set to v.
func NewOptShareQuerySort(v ShareQuerySort) OptShareQuerySort {
	return OptShareQuerySort{
		Value: v,
		Set:   true,
	}
}

// OptShareQuerySort is optional ShareQuerySort.
type OptShareQuerySort struct {
	Value ShareQuerySort
	Set   bool
}

// IsSet returns true if OptShareQuerySort was set.
func (o OptShareQuerySort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShareQuerySort) Reset() {
	var v ShareQuerySort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShareQuerySort) SetTo(v ShareQuerySort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShareQuerySort) Get() (v ShareQuerySort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShareQuerySort) Or(d ShareQuerySort) ShareQuerySort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSharesStreamDownload returns new OptSharesStreamDownload with value set to v.
func NewOptSharesStreamDownload(v SharesStreamDownload) OptSharesStreamDownload {
	return OptSharesStreamDownload{
		Value: v,
		Set:   true,
	}
}

// OptSharesStreamDownload is optional SharesStreamDownload.
type OptSharesStreamDownload struct {
	Value SharesStreamDownload
	Set   bool
}

// IsSet returns true if OptSharesStreamDownload was set.
func (o OptSharesStreamDownload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSharesStreamDownload) Reset() {
	var v SharesStreamDownload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSharesStreamDownload) SetTo(v SharesStreamDownload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSharesStreamDownload) Get() (v SharesStreamDownload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSharesStreamDownload) Or(d SharesStreamDownload) SharesStreamDownload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// File part information.
// Ref: #/components/schemas/Part
type Part struct {
	// Part ID.
	ID int `json:"id"`
	// Encryption salt.
	Salt OptString `json:"salt"`
}

// GetID returns the value of ID.
func (s *Part) GetID() int {
	return s.ID
}

// GetSalt returns the value of Salt.
func (s *Part) GetSalt() OptString {
	return s.Salt
}

// SetID sets the value of ID.
func (s *Part) SetID(val int) {
	s.ID = val
}

// SetSalt sets the value of Salt.
func (s *Part) SetSalt(val OptString) {
	s.Salt = val
}

// User session information containing authentication and profile details.
// Ref: #/components/schemas/Session
type Session struct {
	// User's display name or full name.
	Name string `json:"name"`
	// Telegram username without @ symbol.
	UserName string `json:"userName"`
	// Telegram user ID (unique identifier).
	UserId int64 `json:"userId"`
	// Premium subscription status.
	IsPremium bool `json:"isPremium"`
	// Session hash for verification and security.
	Hash string `json:"hash"`
	// Session expiration date.
	Expires time.Time `json:"expires"`
}

// GetName returns the value of Name.
func (s *Session) GetName() string {
	return s.Name
}

// GetUserName returns the value of UserName.
func (s *Session) GetUserName() string {
	return s.UserName
}

// GetUserId returns the value of UserId.
func (s *Session) GetUserId() int64 {
	return s.UserId
}

// GetIsPremium returns the value of IsPremium.
func (s *Session) GetIsPremium() bool {
	return s.IsPremium
}

// GetHash returns the value of Hash.
func (s *Session) GetHash() string {
	return s.Hash
}

// GetExpires returns the value of Expires.
func (s *Session) GetExpires() time.Time {
	return s.Expires
}

// SetName sets the value of Name.
func (s *Session) SetName(val string) {
	s.Name = val
}

// SetUserName sets the value of UserName.
func (s *Session) SetUserName(val string) {
	s.UserName = val
}

// SetUserId sets the value of UserId.
func (s *Session) SetUserId(val int64) {
	s.UserId = val
}

// SetIsPremium sets the value of IsPremium.
func (s *Session) SetIsPremium(val bool) {
	s.IsPremium = val
}

// SetHash sets the value of Hash.
func (s *Session) SetHash(val string) {
	s.Hash = val
}

// SetExpires sets the value of Expires.
func (s *Session) SetExpires(val time.Time) {
	s.Expires = val
}

// User session information containing authentication and profile details.
// Ref: #/components/schemas/SessionCreate
type SessionCreate struct {
	// User's display name or full name.
	Name string `json:"name"`
	// Telegram username without @ symbol.
	UserName string `json:"userName"`
	// Telegram user ID (unique identifier).
	UserId int64 `json:"userId"`
	// Premium subscription status.
	IsPremium bool `json:"isPremium"`
	// Session hash for verification and security.
	Hash string `json:"hash"`
	// Session expiration date.
	Expires time.Time `json:"expires"`
	// Optional session token for client identification.
	Session string `json:"session"`
}

// GetName returns the value of Name.
func (s *SessionCreate) GetName() string {
	return s.Name
}

// GetUserName returns the value of UserName.
func (s *SessionCreate) GetUserName() string {
	return s.UserName
}

// GetUserId returns the value of UserId.
func (s *SessionCreate) GetUserId() int64 {
	return s.UserId
}

// GetIsPremium returns the value of IsPremium.
func (s *SessionCreate) GetIsPremium() bool {
	return s.IsPremium
}

// GetHash returns the value of Hash.
func (s *SessionCreate) GetHash() string {
	return s.Hash
}

// GetExpires returns the value of Expires.
func (s *SessionCreate) GetExpires() time.Time {
	return s.Expires
}

// GetSession returns the value of Session.
func (s *SessionCreate) GetSession() string {
	return s.Session
}

// SetName sets the value of Name.
func (s *SessionCreate) SetName(val string) {
	s.Name = val
}

// SetUserName sets the value of UserName.
func (s *SessionCreate) SetUserName(val string) {
	s.UserName = val
}

// SetUserId sets the value of UserId.
func (s *SessionCreate) SetUserId(val int64) {
	s.UserId = val
}

// SetIsPremium sets the value of IsPremium.
func (s *SessionCreate) SetIsPremium(val bool) {
	s.IsPremium = val
}

// SetHash sets the value of Hash.
func (s *SessionCreate) SetHash(val string) {
	s.Hash = val
}

// SetExpires sets the value of Expires.
func (s *SessionCreate) SetExpires(val time.Time) {
	s.Expires = val
}

// SetSession sets the value of Session.
func (s *SessionCreate) SetSession(val string) {
	s.Session = val
}

// SessionHeaders wraps Session with response headers.
type SessionHeaders struct {
	SetCookie string
	Response  Session
}

// GetSetCookie returns the value of SetCookie.
func (s *SessionHeaders) GetSetCookie() string {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *SessionHeaders) GetResponse() Session {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *SessionHeaders) SetSetCookie(val string) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *SessionHeaders) SetResponse(val Session) {
	s.Response = val
}

func (*SessionHeaders) authSessionRes() {}

type ShareQueryOrder string

const (
	ShareQueryOrderAsc  ShareQueryOrder = "asc"
	ShareQueryOrderDesc ShareQueryOrder = "desc"
)

// AllValues returns all ShareQueryOrder values.
func (ShareQueryOrder) AllValues() []ShareQueryOrder {
	return []ShareQueryOrder{
		ShareQueryOrderAsc,
		ShareQueryOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShareQueryOrder) MarshalText() ([]byte, error) {
	switch s {
	case ShareQueryOrderAsc:
		return []byte(s), nil
	case ShareQueryOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShareQueryOrder) UnmarshalText(data []byte) error {
	switch ShareQueryOrder(data) {
	case ShareQueryOrderAsc:
		*s = ShareQueryOrderAsc
		return nil
	case ShareQueryOrderDesc:
		*s = ShareQueryOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ShareQuerySort string

const (
	ShareQuerySortName      ShareQuerySort = "name"
	ShareQuerySortUpdatedAt ShareQuerySort = "updatedAt"
	ShareQuerySortSize      ShareQuerySort = "size"
	ShareQuerySortID        ShareQuerySort = "id"
)

// AllValues returns all ShareQuerySort values.
func (ShareQuerySort) AllValues() []ShareQuerySort {
	return []ShareQuerySort{
		ShareQuerySortName,
		ShareQuerySortUpdatedAt,
		ShareQuerySortSize,
		ShareQuerySortID,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShareQuerySort) MarshalText() ([]byte, error) {
	switch s {
	case ShareQuerySortName:
		return []byte(s), nil
	case ShareQuerySortUpdatedAt:
		return []byte(s), nil
	case ShareQuerySortSize:
		return []byte(s), nil
	case ShareQuerySortID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShareQuerySort) UnmarshalText(data []byte) error {
	switch ShareQuerySort(data) {
	case ShareQuerySortName:
		*s = ShareQuerySortName
		return nil
	case ShareQuerySortUpdatedAt:
		*s = ShareQuerySortUpdatedAt
		return nil
	case ShareQuerySortSize:
		*s = ShareQuerySortSize
		return nil
	case ShareQuerySortID:
		*s = ShareQuerySortID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ShareUnlock
type ShareUnlock struct {
	// Share password.
	Password string `json:"password"`
}

// GetPassword returns the value of Password.
func (s *ShareUnlock) GetPassword() string {
	return s.Password
}

// SetPassword sets the value of Password.
func (s *ShareUnlock) SetPassword(val string) {
	s.Password = val
}

type SharesStreamDownload string

const (
	SharesStreamDownload0 SharesStreamDownload = "0"
	SharesStreamDownload1 SharesStreamDownload = "1"
)

// AllValues returns all SharesStreamDownload values.
func (SharesStreamDownload) AllValues() []SharesStreamDownload {
	return []SharesStreamDownload{
		SharesStreamDownload0,
		SharesStreamDownload1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SharesStreamDownload) MarshalText() ([]byte, error) {
	switch s {
	case SharesStreamDownload0:
		return []byte(s), nil
	case SharesStreamDownload1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SharesStreamDownload) UnmarshalText(data []byte) error {
	switch SharesStreamDownload(data) {
	case SharesStreamDownload0:
		*s = SharesStreamDownload0
		return nil
	case SharesStreamDownload1:
		*s = SharesStreamDownload1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SharesStreamOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SharesStreamOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type SharesStreamOKAcceptRanges string

const (
	SharesStreamOKAcceptRangesBytes SharesStreamOKAcceptRanges = "bytes"
)

// AllValues returns all SharesStreamOKAcceptRanges values.
func (SharesStreamOKAcceptRanges) AllValues() []SharesStreamOKAcceptRanges {
	return []SharesStreamOKAcceptRanges{
		SharesStreamOKAcceptRangesBytes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SharesStreamOKAcceptRanges) MarshalText() ([]byte, error) {
	switch s {
	case SharesStreamOKAcceptRangesBytes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SharesStreamOKAcceptRanges) UnmarshalText(data []byte) error {
	switch SharesStreamOKAcceptRanges(data) {
	case SharesStreamOKAcceptRangesBytes:
		*s = SharesStreamOKAcceptRangesBytes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SharesStreamOKHeaders wraps SharesStreamOK with response headers.
type SharesStreamOKHeaders struct {
	AcceptRanges       SharesStreamOKAcceptRanges
	ContentDisposition string
	ContentLength      string
	ContentRange       OptString
	ContentType        string
	Etag               string
	LastModified       string
	Response           SharesStreamOK
}

// GetAcceptRanges returns the value of AcceptRanges.
func (s *SharesStreamOKHeaders) GetAcceptRanges() SharesStreamOKAcceptRanges {
	return s.AcceptRanges
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *SharesStreamOKHeaders) GetContentDisposition() string {
	return s.ContentDisposition
}

// GetContentLength returns the value of ContentLength.
func (s *SharesStreamOKHeaders) GetContentLength() string {
	return s.ContentLength
}

// GetContentRange returns the value of ContentRange.
func (s *SharesStreamOKHeaders) GetContentRange() OptString {
	return s.ContentRange
}

// GetContentType returns the value of ContentType.
func (s *SharesStreamOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetEtag returns the value of Etag.
func (s *SharesStreamOKHeaders) GetEtag() string {
	return s.Etag
}

// GetLastModified returns the value of LastModified.
func (s *SharesStreamOKHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *SharesStreamOKHeaders) GetResponse() SharesStreamOK {
	return s.Response
}

// SetAcceptRanges sets the value of AcceptRanges.
func (s *SharesStreamOKHeaders) SetAcceptRanges(val SharesStreamOKAcceptRanges) {
	s.AcceptRanges = val
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *SharesStreamOKHeaders) SetContentDisposition(val string) {
	s.ContentDisposition = val
}

// SetContentLength sets the value of ContentLength.
func (s *SharesStreamOKHeaders) SetContentLength(val string) {
	s.ContentLength = val
}

// SetContentRange sets the value of ContentRange.
func (s *SharesStreamOKHeaders) SetContentRange(val OptString) {
	s.ContentRange = val
}

// SetContentType sets the value of ContentType.
func (s *SharesStreamOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetEtag sets the value of Etag.
func (s *SharesStreamOKHeaders) SetEtag(val string) {
	s.Etag = val
}

// SetLastModified sets the value of LastModified.
func (s *SharesStreamOKHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *SharesStreamOKHeaders) SetResponse(val SharesStreamOK) {
	s.Response = val
}

func (*SharesStreamOKHeaders) sharesStreamRes() {}

type SharesStreamPartialContent struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SharesStreamPartialContent) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type SharesStreamPartialContentAcceptRanges string

const (
	SharesStreamPartialContentAcceptRangesBytes SharesStreamPartialContentAcceptRanges = "bytes"
)

// AllValues returns all SharesStreamPartialContentAcceptRanges values.
func (SharesStreamPartialContentAcceptRanges) AllValues() []SharesStreamPartialContentAcceptRanges {
	return []SharesStreamPartialContentAcceptRanges{
		SharesStreamPartialContentAcceptRangesBytes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SharesStreamPartialContentAcceptRanges) MarshalText() ([]byte, error) {
	switch s {
	case SharesStreamPartialContentAcceptRangesBytes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SharesStreamPartialContentAcceptRanges) UnmarshalText(data []byte) error {
	switch SharesStreamPartialContentAcceptRanges(data) {
	case SharesStreamPartialContentAcceptRangesBytes:
		*s = SharesStreamPartialContentAcceptRangesBytes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SharesStreamPartialContentHeaders wraps SharesStreamPartialContent with response headers.
type SharesStreamPartialContentHeaders struct {
	AcceptRanges       SharesStreamPartialContentAcceptRanges
	ContentDisposition string
	ContentLength      string
	ContentRange       OptString
	ContentType        string
	Etag               string
	LastModified       string
	Response           SharesStreamPartialContent
}

// GetAcceptRanges returns the value of AcceptRanges.
func (s *SharesStreamPartialContentHeaders) GetAcceptRanges() SharesStreamPartialContentAcceptRanges {
	return s.AcceptRanges
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *SharesStreamPartialContentHeaders) GetContentDisposition() string {
	return s.ContentDisposition
}

// GetContentLength returns the value of ContentLength.
func (s *SharesStreamPartialContentHeaders) GetContentLength() string {
	return s.ContentLength
}

// GetContentRange returns the value of ContentRange.
func (s *SharesStreamPartialContentHeaders) GetContentRange() OptString {
	return s.ContentRange
}

// GetContentType returns the value of ContentType.
func (s *SharesStreamPartialContentHeaders) GetContentType() string {
	return s.ContentType
}

// GetEtag returns the value of Etag.
func (s *SharesStreamPartialContentHeaders) GetEtag() string {
	return s.Etag
}

// GetLastModified returns the value of LastModified.
func (s *SharesStreamPartialContentHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *SharesStreamPartialContentHeaders) GetResponse() SharesStreamPartialContent {
	return s.Response
}

// SetAcceptRanges sets the value of AcceptRanges.
func (s *SharesStreamPartialContentHeaders) SetAcceptRanges(val SharesStreamPartialContentAcceptRanges) {
	s.AcceptRanges = val
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *SharesStreamPartialContentHeaders) SetContentDisposition(val string) {
	s.ContentDisposition = val
}

// SetContentLength sets the value of ContentLength.
func (s *SharesStreamPartialContentHeaders) SetContentLength(val string) {
	s.ContentLength = val
}

// SetContentRange sets the value of ContentRange.
func (s *SharesStreamPartialContentHeaders) SetContentRange(val OptString) {
	s.ContentRange = val
}

// SetContentType sets the value of ContentType.
func (s *SharesStreamPartialContentHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetEtag sets the value of Etag.
func (s *SharesStreamPartialContentHeaders) SetEtag(val string) {
	s.Etag = val
}

// SetLastModified sets the value of LastModified.
func (s *SharesStreamPartialContentHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *SharesStreamPartialContentHeaders) SetResponse(val SharesStreamPartialContent) {
	s.Response = val
}

func (*SharesStreamPartialContentHeaders) sharesStreamRes() {}

// SharesUnlockNoContent is response for SharesUnlock operation.
type SharesUnlockNoContent struct{}

// Ref: #/components/schemas/Source
type Source struct {
	// File ID.
	ID string `json:"id"`
	// File name.
	Name string `json:"name"`
	// File type.
	Type SourceType `json:"type"`
	// Parent ID.
	ParentId string `json:"parentId"`
	// Destination Parent ID.
	DestParentId OptString `json:"destParentId"`
}

// GetID returns the value of ID.
func (s *Source) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Source) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *Source) GetType() SourceType {
	return s.Type
}

// GetParentId returns the value of ParentId.
func (s *Source) GetParentId() string {
	return s.ParentId
}

// GetDestParentId returns the value of DestParentId.
func (s *Source) GetDestParentId() OptString {
	return s.DestParentId
}

// SetID sets the value of ID.
func (s *Source) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Source) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Source) SetType(val SourceType) {
	s.Type = val
}

// SetParentId sets the value of ParentId.
func (s *Source) SetParentId(val string) {
	s.ParentId = val
}

// SetDestParentId sets the value of DestParentId.
func (s *Source) SetDestParentId(val OptString) {
	s.DestParentId = val
}

// File type.
type SourceType string

const (
	SourceTypeFolder SourceType = "folder"
	SourceTypeFile   SourceType = "file"
)

// AllValues returns all SourceType values.
func (SourceType) AllValues() []SourceType {
	return []SourceType{
		SourceTypeFolder,
		SourceTypeFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SourceType) MarshalText() ([]byte, error) {
	switch s {
	case SourceTypeFolder:
		return []byte(s), nil
	case SourceTypeFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SourceType) UnmarshalText(data []byte) error {
	switch SourceType(data) {
	case SourceTypeFolder:
		*s = SourceTypeFolder
		return nil
	case SourceTypeFile:
		*s = SourceTypeFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details of an uploaded part.
// Ref: #/components/schemas/UploadPart
type UploadPart struct {
	// Name identifier of the part.
	Name string `json:"name"`
	// Telegram Message ID.
	PartId int `json:"partId"`
	// Sequential number of the part.
	PartNo int `json:"partNo"`
	// Channel identifier associated with the upload.
	ChannelId int64 `json:"channelId"`
	// Size of the part in bytes.
	Size int64 `json:"size"`
	// Indicates if the part is encrypted.
	Encrypted bool `json:"encrypted"`
	// Salt value used for encryption, required if encrypted is true.
	Salt OptString `json:"salt"`
}

// GetName returns the value of Name.
func (s *UploadPart) GetName() string {
	return s.Name
}

// GetPartId returns the value of PartId.
func (s *UploadPart) GetPartId() int {
	return s.PartId
}

// GetPartNo returns the value of PartNo.
func (s *UploadPart) GetPartNo() int {
	return s.PartNo
}

// GetChannelId returns the value of ChannelId.
func (s *UploadPart) GetChannelId() int64 {
	return s.ChannelId
}

// GetSize returns the value of Size.
func (s *UploadPart) GetSize() int64 {
	return s.Size
}

// GetEncrypted returns the value of Encrypted.
func (s *UploadPart) GetEncrypted() bool {
	return s.Encrypted
}

// GetSalt returns the value of Salt.
func (s *UploadPart) GetSalt() OptString {
	return s.Salt
}

// SetName sets the value of Name.
func (s *UploadPart) SetName(val string) {
	s.Name = val
}

// SetPartId sets the value of PartId.
func (s *UploadPart) SetPartId(val int) {
	s.PartId = val
}

// SetPartNo sets the value of PartNo.
func (s *UploadPart) SetPartNo(val int) {
	s.PartNo = val
}

// SetChannelId sets the value of ChannelId.
func (s *UploadPart) SetChannelId(val int64) {
	s.ChannelId = val
}

// SetSize sets the value of Size.
func (s *UploadPart) SetSize(val int64) {
	s.Size = val
}

// SetEncrypted sets the value of Encrypted.
func (s *UploadPart) SetEncrypted(val bool) {
	s.Encrypted = val
}

// SetSalt sets the value of Salt.
func (s *UploadPart) SetSalt(val OptString) {
	s.Salt = val
}

// Statistics about the upload.
// Ref: #/components/schemas/UploadStats
type UploadStats struct {
	// Date and time when the upload occurred.
	UploadDate time.Time `json:"uploadDate"`
	// Total number of bytes uploaded.
	TotalUploaded int64 `json:"totalUploaded"`
}

// GetUploadDate returns the value of UploadDate.
func (s *UploadStats) GetUploadDate() time.Time {
	return s.UploadDate
}

// GetTotalUploaded returns the value of TotalUploaded.
func (s *UploadStats) GetTotalUploaded() int64 {
	return s.TotalUploaded
}

// SetUploadDate sets the value of UploadDate.
func (s *UploadStats) SetUploadDate(val time.Time) {
	s.UploadDate = val
}

// SetTotalUploaded sets the value of TotalUploaded.
func (s *UploadStats) SetTotalUploaded(val int64) {
	s.TotalUploaded = val
}

// UploadsDeleteNoContent is response for UploadsDelete operation.
type UploadsDeleteNoContent struct{}

type UploadsUploadReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadsUploadReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// UploadsUploadReqWithContentType wraps UploadsUploadReq with Content-Type.
type UploadsUploadReqWithContentType struct {
	ContentType string
	Content     UploadsUploadReq
}

// GetContentType returns the value of ContentType.
func (s *UploadsUploadReqWithContentType) GetContentType() string {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *UploadsUploadReqWithContentType) GetContent() UploadsUploadReq {
	return s.Content
}

// SetContentType sets the value of ContentType.
func (s *UploadsUploadReqWithContentType) SetContentType(val string) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *UploadsUploadReqWithContentType) SetContent(val UploadsUploadReq) {
	s.Content = val
}

// User configuration for channel and bot settings.
// Ref: #/components/schemas/UserConfig
type UserConfig struct {
	// Channel identifier associated with the user.
	ChannelId int64 `json:"channelId"`
	// List of bot tokens.
	Bots []string `json:"bots"`
}

// GetChannelId returns the value of ChannelId.
func (s *UserConfig) GetChannelId() int64 {
	return s.ChannelId
}

// GetBots returns the value of Bots.
func (s *UserConfig) GetBots() []string {
	return s.Bots
}

// SetChannelId sets the value of ChannelId.
func (s *UserConfig) SetChannelId(val int64) {
	s.ChannelId = val
}

// SetBots sets the value of Bots.
func (s *UserConfig) SetBots(val []string) {
	s.Bots = val
}

// User session information.
// Ref: #/components/schemas/UserSession
type UserSession struct {
	// Unique hash identifier for the session.
	Hash string `json:"hash"`
	// Session creation timestamp.
	CreatedAt time.Time `json:"createdAt"`
	// Geographic location where session was created.
	Location OptString `json:"location"`
	// Indicates if session is from an official Telegram app.
	OfficialApp OptBool `json:"officialApp"`
	// Name of the application used for session.
	AppName OptString `json:"appName"`
	// Indicates if the session is still valid.
	Valid bool `json:"valid"`
	// Indicates if this is the currently active session.
	Current bool `json:"current"`
}

// GetHash returns the value of Hash.
func (s *UserSession) GetHash() string {
	return s.Hash
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSession) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLocation returns the value of Location.
func (s *UserSession) GetLocation() OptString {
	return s.Location
}

// GetOfficialApp returns the value of OfficialApp.
func (s *UserSession) GetOfficialApp() OptBool {
	return s.OfficialApp
}

// GetAppName returns the value of AppName.
func (s *UserSession) GetAppName() OptString {
	return s.AppName
}

// GetValid returns the value of Valid.
func (s *UserSession) GetValid() bool {
	return s.Valid
}

// GetCurrent returns the value of Current.
func (s *UserSession) GetCurrent() bool {
	return s.Current
}

// SetHash sets the value of Hash.
func (s *UserSession) SetHash(val string) {
	s.Hash = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSession) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLocation sets the value of Location.
func (s *UserSession) SetLocation(val OptString) {
	s.Location = val
}

// SetOfficialApp sets the value of OfficialApp.
func (s *UserSession) SetOfficialApp(val OptBool) {
	s.OfficialApp = val
}

// SetAppName sets the value of AppName.
func (s *UserSession) SetAppName(val OptString) {
	s.AppName = val
}

// SetValid sets the value of Valid.
func (s *UserSession) SetValid(val bool) {
	s.Valid = val
}

// SetCurrent sets the value of Current.
func (s *UserSession) SetCurrent(val bool) {
	s.Current = val
}

// UsersAddBotsNoContent is response for UsersAddBots operation.
type UsersAddBotsNoContent struct{}

// UsersCreateChannelCreated is response for UsersCreateChannel operation.
type UsersCreateChannelCreated struct{}

// UsersDeleteChannelNoContent is response for UsersDeleteChannel operation.
type UsersDeleteChannelNoContent struct{}

type UsersProfileImageOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UsersProfileImageOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// UsersProfileImageOKHeaders wraps UsersProfileImageOK with response headers.
type UsersProfileImageOKHeaders struct {
	CacheControl       string
	ContentDisposition string
	ContentLength      int64
	Etag               string
	Response           UsersProfileImageOK
}

// GetCacheControl returns the value of CacheControl.
func (s *UsersProfileImageOKHeaders) GetCacheControl() string {
	return s.CacheControl
}

// GetContentDisposition returns the value of ContentDisposition.
func (s *UsersProfileImageOKHeaders) GetContentDisposition() string {
	return s.ContentDisposition
}

// GetContentLength returns the value of ContentLength.
func (s *UsersProfileImageOKHeaders) GetContentLength() int64 {
	return s.ContentLength
}

// GetEtag returns the value of Etag.
func (s *UsersProfileImageOKHeaders) GetEtag() string {
	return s.Etag
}

// GetResponse returns the value of Response.
func (s *UsersProfileImageOKHeaders) GetResponse() UsersProfileImageOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *UsersProfileImageOKHeaders) SetCacheControl(val string) {
	s.CacheControl = val
}

// SetContentDisposition sets the value of ContentDisposition.
func (s *UsersProfileImageOKHeaders) SetContentDisposition(val string) {
	s.ContentDisposition = val
}

// SetContentLength sets the value of ContentLength.
func (s *UsersProfileImageOKHeaders) SetContentLength(val int64) {
	s.ContentLength = val
}

// SetEtag sets the value of Etag.
func (s *UsersProfileImageOKHeaders) SetEtag(val string) {
	s.Etag = val
}

// SetResponse sets the value of Response.
func (s *UsersProfileImageOKHeaders) SetResponse(val UsersProfileImageOK) {
	s.Response = val
}

// UsersRemoveBotsNoContent is response for UsersRemoveBots operation.
type UsersRemoveBotsNoContent struct{}

// UsersRemoveSessionNoContent is response for UsersRemoveSession operation.
type UsersRemoveSessionNoContent struct{}

// UsersSyncChannelsNoContent is response for UsersSyncChannels operation.
type UsersSyncChannelsNoContent struct{}

// UsersUpdateChannelNoContent is response for UsersUpdateChannel operation.
type UsersUpdateChannelNoContent struct{}
