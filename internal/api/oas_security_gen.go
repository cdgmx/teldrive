// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleApiKeyAuth handles ApiKeyAuth security.
	HandleApiKeyAuth(ctx context.Context, operationName OperationName, t ApiKeyAuth) (context.Context, error)
	// HandleBearerAuth handles BearerAuth security.
	HandleBearerAuth(ctx context.Context, operationName OperationName, t BearerAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesApiKeyAuth = map[string][]string{
	AuthLogoutOperation:         []string{},
	EventsGetEventsOperation:    []string{},
	FilesCategoryStatsOperation: []string{},
	FilesCopyOperation:          []string{},
	FilesCreateOperation:        []string{},
	FilesCreateShareOperation:   []string{},
	FilesDeleteOperation:        []string{},
	FilesDeleteShareOperation:   []string{},
	FilesEditShareOperation:     []string{},
	FilesGetByIdOperation:       []string{},
	FilesListOperation:          []string{},
	FilesMkdirOperation:         []string{},
	FilesMoveOperation:          []string{},
	FilesShareByidOperation:     []string{},
	FilesUpdateOperation:        []string{},
	FilesUpdatePartsOperation:   []string{},
	UploadsDeleteOperation:      []string{},
	UploadsPartsByIdOperation:   []string{},
	UploadsStatsOperation:       []string{},
	UploadsUploadOperation:      []string{},
	UsersAddBotsOperation:       []string{},
	UsersCreateChannelOperation: []string{},
	UsersDeleteChannelOperation: []string{},
	UsersListChannelsOperation:  []string{},
	UsersListSessionsOperation:  []string{},
	UsersProfileImageOperation:  []string{},
	UsersRemoveBotsOperation:    []string{},
	UsersRemoveSessionOperation: []string{},
	UsersStatsOperation:         []string{},
	UsersSyncChannelsOperation:  []string{},
	UsersUpdateChannelOperation: []string{},
}

func (s *Server) securityApiKeyAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t ApiKeyAuth
	const parameterName = "access_token"
	var value string
	switch cookie, err := req.Cookie(parameterName); {
	case err == nil: // if NO error
		value = cookie.Value
	case errors.Is(err, http.ErrNoCookie):
		return ctx, false, nil
	default:
		return nil, false, errors.Wrap(err, "get cookie value")
	}
	t.APIKey = value
	t.Roles = operationRolesApiKeyAuth[operationName]
	rctx, err := s.sec.HandleApiKeyAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesBearerAuth = map[string][]string{
	AuthLogoutOperation:         []string{},
	EventsGetEventsOperation:    []string{},
	FilesCategoryStatsOperation: []string{},
	FilesCopyOperation:          []string{},
	FilesCreateOperation:        []string{},
	FilesCreateShareOperation:   []string{},
	FilesDeleteOperation:        []string{},
	FilesDeleteShareOperation:   []string{},
	FilesEditShareOperation:     []string{},
	FilesGetByIdOperation:       []string{},
	FilesListOperation:          []string{},
	FilesMkdirOperation:         []string{},
	FilesMoveOperation:          []string{},
	FilesShareByidOperation:     []string{},
	FilesUpdateOperation:        []string{},
	FilesUpdatePartsOperation:   []string{},
	UploadsDeleteOperation:      []string{},
	UploadsPartsByIdOperation:   []string{},
	UploadsStatsOperation:       []string{},
	UploadsUploadOperation:      []string{},
	UsersAddBotsOperation:       []string{},
	UsersCreateChannelOperation: []string{},
	UsersDeleteChannelOperation: []string{},
	UsersListChannelsOperation:  []string{},
	UsersListSessionsOperation:  []string{},
	UsersProfileImageOperation:  []string{},
	UsersRemoveBotsOperation:    []string{},
	UsersRemoveSessionOperation: []string{},
	UsersStatsOperation:         []string{},
	UsersSyncChannelsOperation:  []string{},
	UsersUpdateChannelOperation: []string{},
}

func (s *Server) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearerAuth[operationName]
	rctx, err := s.sec.HandleBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
