// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"

				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "log"

					if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"

						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAuthLoginRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'o': // Prefix: "out"

						if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAuthLogoutRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 's': // Prefix: "session"

					if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAuthSessionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'w': // Prefix: "ws"

					if l := len("ws"); len(elem) >= l && elem[0:l] == "ws" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAuthWsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'e': // Prefix: "events"

				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleEventsGetEventsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'f': // Prefix: "files"

				if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleFilesListRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleFilesCreateRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "categories"
						origElem := elem
						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFilesCategoryStatsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'd': // Prefix: "delete"
						origElem := elem
						if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleFilesDeleteRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'm': // Prefix: "m"
						origElem := elem
						if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'k': // Prefix: "kdir"

							if l := len("kdir"); len(elem) >= l && elem[0:l] == "kdir" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleFilesMkdirRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'o': // Prefix: "ove"

							if l := len("ove"); len(elem) >= l && elem[0:l] == "ove" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleFilesMoveRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleFilesGetByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleFilesUpdateRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "copy"
							origElem := elem
							if l := len("copy"); len(elem) >= l && elem[0:l] == "copy" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleFilesCopyRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "parts"
							origElem := elem
							if l := len("parts"); len(elem) >= l && elem[0:l] == "parts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleFilesUpdatePartsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "share"
							origElem := elem
							if l := len("share"); len(elem) >= l && elem[0:l] == "share" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleFilesDeleteShareRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleFilesShareByidRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleFilesEditShareRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleFilesCreateShareRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH,POST")
								}

								return
							}

							elem = origElem
						}
						// Param: "name"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFilesStreamRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

			case 's': // Prefix: "shares/"

				if l := len("shares/"); len(elem) >= l && elem[0:l] == "shares/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleSharesGetByIdRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "files"

						if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleSharesListFilesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "fileId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "name"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSharesStreamRequest([3]string{
											args[0],
											args[1],
											args[2],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						}

					case 'u': // Prefix: "unlock"

						if l := len("unlock"); len(elem) >= l && elem[0:l] == "unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSharesUnlockRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'u': // Prefix: "u"

				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "ploads/"

					if l := len("ploads/"); len(elem) >= l && elem[0:l] == "ploads/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "stats"
						origElem := elem
						if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUploadsStatsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}
					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleUploadsDeleteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleUploadsPartsByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadsUploadRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}

				case 's': // Prefix: "sers/"

					if l := len("sers/"); len(elem) >= l && elem[0:l] == "sers/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bots"

						if l := len("bots"); len(elem) >= l && elem[0:l] == "bots" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleUsersRemoveBotsRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleUsersAddBotsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,POST")
							}

							return
						}

					case 'c': // Prefix: "c"

						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "hannels"

							if l := len("hannels"); len(elem) >= l && elem[0:l] == "hannels" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleUsersListChannelsRequest([0]string{}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUsersUpdateChannelRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleUsersCreateChannelRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "sync"
									origElem := elem
									if l := len("sync"); len(elem) >= l && elem[0:l] == "sync" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PATCH":
											s.handleUsersSyncChannelsRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PATCH")
										}

										return
									}

									elem = origElem
								}
								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleUsersDeleteChannelRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE")
									}

									return
								}

							}

						case 'o': // Prefix: "onfig"

							if l := len("onfig"); len(elem) >= l && elem[0:l] == "onfig" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleUsersStatsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					case 'p': // Prefix: "profile/"

						if l := len("profile/"); len(elem) >= l && elem[0:l] == "profile/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "name"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleUsersProfileImageRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 's': // Prefix: "sessions"

						if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleUsersListSessionsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleUsersRemoveSessionRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

						}

					}

				}

			case 'v': // Prefix: "version"

				if l := len("version"); len(elem) >= l && elem[0:l] == "version" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleVersionVersionRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"

				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "log"

					if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"

						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AuthLoginOperation
								r.summary = "Login"
								r.operationID = "Auth_login"
								r.pathPattern = "/auth/login"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'o': // Prefix: "out"

						if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AuthLogoutOperation
								r.summary = "Logout"
								r.operationID = "Auth_logout"
								r.pathPattern = "/auth/logout"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "session"

					if l := len("session"); len(elem) >= l && elem[0:l] == "session" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = AuthSessionOperation
							r.summary = "Get session information"
							r.operationID = "Auth_session"
							r.pathPattern = "/auth/session"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'w': // Prefix: "ws"

					if l := len("ws"); len(elem) >= l && elem[0:l] == "ws" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = AuthWsOperation
							r.summary = "Websocket QR Login"
							r.operationID = "Auth_ws"
							r.pathPattern = "/auth/ws"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'e': // Prefix: "events"

				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = EventsGetEventsOperation
						r.summary = "Get events"
						r.operationID = "Events_getEvents"
						r.pathPattern = "/events"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'f': // Prefix: "files"

				if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = FilesListOperation
						r.summary = "List all files"
						r.operationID = "Files_list"
						r.pathPattern = "/files"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = FilesCreateOperation
						r.summary = "Create a new file"
						r.operationID = "Files_create"
						r.pathPattern = "/files"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "categories"
						origElem := elem
						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = FilesCategoryStatsOperation
								r.summary = "Get category stats"
								r.operationID = "Files_categoryStats"
								r.pathPattern = "/files/categories"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'd': // Prefix: "delete"
						origElem := elem
						if l := len("delete"); len(elem) >= l && elem[0:l] == "delete" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = FilesDeleteOperation
								r.summary = "Delete files"
								r.operationID = "Files_delete"
								r.pathPattern = "/files/delete"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'm': // Prefix: "m"
						origElem := elem
						if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'k': // Prefix: "kdir"

							if l := len("kdir"); len(elem) >= l && elem[0:l] == "kdir" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = FilesMkdirOperation
									r.summary = "Create Folders"
									r.operationID = "Files_mkdir"
									r.pathPattern = "/files/mkdir"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'o': // Prefix: "ove"

							if l := len("ove"); len(elem) >= l && elem[0:l] == "ove" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = FilesMoveOperation
									r.summary = "Move files"
									r.operationID = "Files_move"
									r.pathPattern = "/files/move"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = FilesGetByIdOperation
							r.summary = "Get file by ID"
							r.operationID = "Files_getById"
							r.pathPattern = "/files/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = FilesUpdateOperation
							r.summary = "Update file"
							r.operationID = "Files_update"
							r.pathPattern = "/files/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "copy"
							origElem := elem
							if l := len("copy"); len(elem) >= l && elem[0:l] == "copy" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = FilesCopyOperation
									r.summary = "Copy file"
									r.operationID = "Files_copy"
									r.pathPattern = "/files/{id}/copy"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "parts"
							origElem := elem
							if l := len("parts"); len(elem) >= l && elem[0:l] == "parts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = FilesUpdatePartsOperation
									r.summary = "Update file parts"
									r.operationID = "Files_updateParts"
									r.pathPattern = "/files/{id}/parts"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "share"
							origElem := elem
							if l := len("share"); len(elem) >= l && elem[0:l] == "share" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = FilesDeleteShareOperation
									r.summary = "Delete share"
									r.operationID = "Files_deleteShare"
									r.pathPattern = "/files/{id}/share"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = FilesShareByidOperation
									r.summary = "Get share by file ID"
									r.operationID = "Files_shareByid"
									r.pathPattern = "/files/{id}/share"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = FilesEditShareOperation
									r.summary = "Edit share"
									r.operationID = "Files_editShare"
									r.pathPattern = "/files/{id}/share"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = FilesCreateShareOperation
									r.summary = "Create a share for the file"
									r.operationID = "Files_createShare"
									r.pathPattern = "/files/{id}/share"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "name"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = FilesStreamOperation
								r.summary = "Stream or Download file"
								r.operationID = "Files_stream"
								r.pathPattern = "/files/{id}/{name}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

					}

				}

			case 's': // Prefix: "shares/"

				if l := len("shares/"); len(elem) >= l && elem[0:l] == "shares/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = SharesGetByIdOperation
						r.summary = "Get share by ID"
						r.operationID = "Shares_getById"
						r.pathPattern = "/shares/{id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "files"

						if l := len("files"); len(elem) >= l && elem[0:l] == "files" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = SharesListFilesOperation
								r.summary = "List files in share"
								r.operationID = "Shares_listFiles"
								r.pathPattern = "/shares/{id}/files"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "fileId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "name"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[2] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = SharesStreamOperation
										r.summary = "Stream or Download shared file"
										r.operationID = "Shares_stream"
										r.pathPattern = "/shares/{id}/files/{fileId}/{name}"
										r.args = args
										r.count = 3
										return r, true
									default:
										return
									}
								}

							}

						}

					case 'u': // Prefix: "unlock"

						if l := len("unlock"); len(elem) >= l && elem[0:l] == "unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = SharesUnlockOperation
								r.summary = "Unlock share"
								r.operationID = "Shares_unlock"
								r.pathPattern = "/shares/{id}/unlock"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'u': // Prefix: "u"

				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "ploads/"

					if l := len("ploads/"); len(elem) >= l && elem[0:l] == "ploads/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "stats"
						origElem := elem
						if l := len("stats"); len(elem) >= l && elem[0:l] == "stats" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UploadsStatsOperation
								r.summary = "Get upload stats"
								r.operationID = "Uploads_stats"
								r.pathPattern = "/uploads/stats"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = UploadsDeleteOperation
							r.summary = "Delete uploaded file"
							r.operationID = "Uploads_delete"
							r.pathPattern = "/uploads/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = UploadsPartsByIdOperation
							r.summary = "Get uploaded parts by ID"
							r.operationID = "Uploads_partsById"
							r.pathPattern = "/uploads/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = UploadsUploadOperation
							r.summary = "Upload file"
							r.operationID = "Uploads_upload"
							r.pathPattern = "/uploads/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				case 's': // Prefix: "sers/"

					if l := len("sers/"); len(elem) >= l && elem[0:l] == "sers/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "bots"

						if l := len("bots"); len(elem) >= l && elem[0:l] == "bots" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = UsersRemoveBotsOperation
								r.summary = "Remove bots from user account"
								r.operationID = "Users_removeBots"
								r.pathPattern = "/users/bots"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = UsersAddBotsOperation
								r.summary = "Add bots to user account"
								r.operationID = "Users_addBots"
								r.pathPattern = "/users/bots"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'c': // Prefix: "c"

						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'h': // Prefix: "hannels"

							if l := len("hannels"); len(elem) >= l && elem[0:l] == "hannels" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = UsersListChannelsOperation
									r.summary = "List user channels"
									r.operationID = "Users_listChannels"
									r.pathPattern = "/users/channels"
									r.args = args
									r.count = 0
									return r, true
								case "PATCH":
									r.name = UsersUpdateChannelOperation
									r.summary = "Update user channel"
									r.operationID = "Users_updateChannel"
									r.pathPattern = "/users/channels"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = UsersCreateChannelOperation
									r.summary = "Create user channel"
									r.operationID = "Users_createChannel"
									r.pathPattern = "/users/channels"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "sync"
									origElem := elem
									if l := len("sync"); len(elem) >= l && elem[0:l] == "sync" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PATCH":
											r.name = UsersSyncChannelsOperation
											r.summary = "Sync user channels"
											r.operationID = "Users_syncChannels"
											r.pathPattern = "/users/channels/sync"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}
								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = UsersDeleteChannelOperation
										r.summary = "Delete user channel"
										r.operationID = "Users_deleteChannel"
										r.pathPattern = "/users/channels/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						case 'o': // Prefix: "onfig"

							if l := len("onfig"); len(elem) >= l && elem[0:l] == "onfig" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = UsersStatsOperation
									r.summary = "Get user config"
									r.operationID = "Users_stats"
									r.pathPattern = "/users/config"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'p': // Prefix: "profile/"

						if l := len("profile/"); len(elem) >= l && elem[0:l] == "profile/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "name"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = UsersProfileImageOperation
								r.summary = "Get user profile photo"
								r.operationID = "Users_profileImage"
								r.pathPattern = "/users/profile/{name}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "sessions"

						if l := len("sessions"); len(elem) >= l && elem[0:l] == "sessions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = UsersListSessionsOperation
								r.summary = "List user sessions"
								r.operationID = "Users_listSessions"
								r.pathPattern = "/users/sessions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = UsersRemoveSessionOperation
									r.summary = "Remove user session"
									r.operationID = "Users_removeSession"
									r.pathPattern = "/users/sessions/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'v': // Prefix: "version"

				if l := len("version"); len(elem) >= l && elem[0:l] == "version" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = VersionVersionOperation
						r.summary = "Get API version"
						r.operationID = "Version_version"
						r.pathPattern = "/version"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			}

		}
	}
	return r, false
}
